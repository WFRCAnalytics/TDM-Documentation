---
title: Compare Model Results
execute:
    echo: false
    message: false
    warning: false
---

```{python}
modelNew = 'WF TDM v9.0.2 - official'
modelOld = 'WF TDM v9.0.1 - official - patch 2'
```

This section compares the model results between version 9.0.2 and version 9.0.1-patch2.

## Road Volume Comparisons
The comparison between daily volumes at the segment level can be found in @fig-volume-comparison for 2019 and 2050. Decreases in volume in version 9.0.2 compared to version 9.0.1-patch2 are shown in blue, while increases are shown in red. @fig-volume-truck-comparison shows a similar comparison, displaying medium plus heavy truck volumes.

For 2019, the differences are negligible in all vehicle and truck volumes between the model versions. 

For 2050, there are increases in both all vehicle and truck volumes on I-15 in Davis County due to increased general purpose capacity. Other differences are negligible.


::: {.panel-tabset}

### Volume Change - All Vehicles

::: {#fig-volume-comparison layout-ncol=3}

![2019](data/map_pngs/vol19-cropped.png){#fig-vol19}

![2050 Fiscally Constrained](data/map_pngs/vol50-cropped.png){#fig-vol50}

![](data/map_pngs/vol-legend-cropped.png)

Daily Volume Comparison – All Vehicles
:::

### Volume Change - Truck

::: {#fig-volume-truck-comparison layout-ncol=3}

![2019](data/map_pngs/vol19-truck-cropped.png){#fig-vol19}

![2050 Fiscally Constrained](data/map_pngs/vol50-truck-cropped.png){#fig-vol50}

![](data/map_pngs/vol-truck-legend-cropped.png)

Daily Volume Comparison – Medium+Heavy Truck
:::

<!--

### Percent Volume Change

::: {#fig-percent-volume-comparison layout-ncol=3}

![2019](data/map_pngs/vol19_percentchange-cropped.png){#fig-vol19}

![2050](data/map_pngs/vol50_percentchange-cropped.png){#fig-vol50}

![](data/map_pngs/vol_percentchange-legend.png)

Model Daily Volumes Comparison - Percent Change (v9 vs v8.3.2)
:::
-->
:::

## Transit Comparisons
```{python}
import pandas as pd
import plotly as py
import plotly.graph_objects as go
import plotly.express as px 
import ipywidgets as widgets
import numpy as np
from scipy import special
import time
import math as msi
import sys
```

```{python}
# include in all scenario groups
lstIncludeInAll = ['BY','TIP']
```


```{python}
# Read the CSV files into DataFrames
dfTransitSummary = pd.read_csv('intermediate/dfTransitSummary.csv')
dfRouteSummary = pd.read_csv('intermediate/dfRouteSummary.csv')
dfScenarios = pd.read_csv('intermediate/dfScenarios.csv')
dfTransitSummaryWithScenarioData = pd.read_csv('intermediate/dfTransitSummaryWithScenarioData.csv')
dfRouteSummaryWithScenarioData = pd.read_csv('intermediate/dfRouteSummaryWithScenarioData.csv')
dfTransitSummaryPlotData = pd.read_csv('intermediate/dfTransitSummaryPlotData.csv')
```

```{python}
#Transit Ridership Plotting Function

import math

def update_plot(tdmVersionsWithDate, scenarioGroups, modeGroups, trippurps, periods):

    data = []

    for v in tdmVersionsWithDate:
        for g in scenarioGroups:
            for m in modeGroups:

                # only do if data in dataframe since BY data is concatonated later
                if dfTransitSummaryPlotData[(dfTransitSummaryPlotData['tdmVersionWithDate']==v) & (dfTransitSummaryPlotData['scenarioGroup'].isin([g])) & (dfTransitSummaryPlotData['modeGroup']==m) & (dfTransitSummaryPlotData['TRIPPURP'].isin(trippurps)) & (dfTransitSummaryPlotData['PERIOD'].isin(periods))].shape[0]>1:

                    # data for plotting from filtered dataframe}
                    plotdata = dfTransitSummaryPlotData[(dfTransitSummaryPlotData['tdmVersionWithDate']==v) & (dfTransitSummaryPlotData['scenarioGroup'].isin(lstIncludeInAll + [g])) & (dfTransitSummaryPlotData['modeGroup']==m) & (dfTransitSummaryPlotData['TRIPPURP'].isin(trippurps)) & (dfTransitSummaryPlotData['PERIOD'].isin(periods))]

                    #display(plotdata)

                    plotdata = plotdata.groupby(['scenarioYear'], as_index=False).agg(TRIPS=('TRIPS','sum'))

                    # fill any NaN values with zeros
                    plotdata = plotdata.fillna(0)

                    #display(plotdata)

                    xplot = plotdata['scenarioYear']
                    yplot = plotdata['TRIPS'       ]

                    trace1 = go.Scatter(
                        x=xplot,
                        y=yplot,
                        mode='markers+lines',
                        name= v.split(' ')[2], # get version number by getting all characters before first space
                        marker=dict(size=12,
                                line=dict(width=2,
                                            color='DarkSlateGrey'))#,
                        #stackgroup='one',
                        #groupnorm='percent' # sets the normalization for the sum of the stackgroup
        #                line=dict(
        #                    shape='spline'
        #                )
                    )
                    data.append(trace1)


    layout = go.Layout(
        #title='Trips by Mode (' + '/'.join(trippurps) + ' ' + '/'.join(periods) + ')',
        yaxis=dict(
            title='Trips',
            rangemode = 'tozero'#,
            #range=(0,np.null)
        ),
        xaxis=dict(
            title='Year',
            range=(2018,2051)
        ),
        width=800,
        height=550
    )
    
    fig = go.Figure(data=data, layout=layout)
    fig.update_layout(legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="left",
        x=0.01
    ))
    py.offline.iplot(fig)
py.offline.init_notebook_mode(connected=True)
```

```{python}
#Transit Share Plotting Function

import math

def update_plot_stackedarea(tdmVersionWithDate, scenarioGroup, modeGroups, trippurps, periods):

    data = []

    modeGroups = sorted(modeGroups)
    modeNames = ['Local Bus','Core Bus','Express Bus','Bus Rapid Transit','Light-Rail Transit','Commuter-Rail Transit']

    for m in modeGroups: 
        # only do if data in dataframe since BY data is concatonated later
        if dfTransitSummaryPlotData[(dfTransitSummaryPlotData['tdmVersionWithDate']==tdmVersionWithDate) &
                                    (dfTransitSummaryPlotData['scenarioGroup'     ]==scenarioGroup     ) &
                                    (dfTransitSummaryPlotData['modeGroup'         ]==m                 ) &
                                    (dfTransitSummaryPlotData['TRIPPURP'          ].isin(trippurps)    ) &
                                    (dfTransitSummaryPlotData['PERIOD'            ].isin(periods)      )].shape[0]>1:

            # data for plotting from filtered dataframe}
            plotdata = dfTransitSummaryPlotData[(dfTransitSummaryPlotData['tdmVersionWithDate']==tdmVersionWithDate                    ) &
                                                (dfTransitSummaryPlotData['scenarioGroup'     ].isin(lstIncludeInAll + [scenarioGroup])) &
                                                (dfTransitSummaryPlotData['modeGroup'         ]==m                                     ) &
                                                (dfTransitSummaryPlotData['TRIPPURP'          ].isin(trippurps)                        ) &
                                                (dfTransitSummaryPlotData['PERIOD'            ].isin(periods)                          )]

            #display(plotdata)

            plotdata = plotdata.groupby(['scenarioYear'], as_index=False).agg(TRIPS=('TRIPS','sum'))

            # fill any NaN values with zeros
            plotdata = plotdata.fillna(0)

            #display(plotdata)

            xplot = plotdata['scenarioYear']
            yplot = plotdata['TRIPS'       ]

            trace1 = go.Scatter(
                x=xplot,
                y=yplot,
                mode='lines',
                name= modeNames[modeGroups.index(m)],
                stackgroup='one',
                groupnorm='percent' # sets the normalization for the sum of the stackgroup
            )
            data.append(trace1)


    layout = go.Layout(
        #title=tdmVersionWithDate + ' Trips Mode Split (' + '/'.join(trippurps) + ' ' + '/'.join(periods) + ')',
        yaxis=dict(
            title='Percent of Total Trips'#,
            #rangemode = 'tozero',
            #ticksuffix='%',
            #range=(0,100)
        ),
        xaxis=dict(
            title='Year'#,
            #range=(2018,2051)
        ),
        width=840,
        height=400
    )
    
    fig2 = go.Figure(data=data, layout=layout)
    py.offline.iplot(fig2)
py.offline.init_notebook_mode(connected=True)
```

```{python}
#PLOTTING FUNCTION

import math

def update_plot_stackedarea_boardings(tdmVersionWithDate, scenarioGroup):

    data = []

    modes = [4,5,6,9,7,8] #put modes in sorted order
    #modes = sorted(dfRouteSummaryWithScenarioData['MODE'].unique())
    modeNames = ['Local Bus','Core Bus','Express Bus','Bus Rapid Transit','Light-Rail Transit','Commuter-Rail Transit']

    for m in modes: 
        # only do if data in dataframe since BY data is concatonated later
        if dfRouteSummaryWithScenarioData[(dfRouteSummaryWithScenarioData['tdmVersionWithDate']==tdmVersionWithDate) &
                                          (dfRouteSummaryWithScenarioData['scenarioGroup'     ]==scenarioGroup     ) &
                                          (dfRouteSummaryWithScenarioData['MODE'              ]==m                 )].shape[0]>1:

            # data for plotting from filtered dataframe}
            plotdata = dfRouteSummaryWithScenarioData[(dfRouteSummaryWithScenarioData['tdmVersionWithDate']==tdmVersionWithDate                    ) &
                                                      (dfRouteSummaryWithScenarioData['scenarioGroup'     ].isin(lstIncludeInAll + [scenarioGroup])) &
                                                      (dfRouteSummaryWithScenarioData['MODE'              ]==m                                     )]

            #display(plotdata)

            plotdata = plotdata.groupby(['scenarioYear'], as_index=False).agg(BOARDINGS=('DY_BRDA','sum'))

            # fill any NaN values with zeros
            plotdata = plotdata.fillna(0)

            #display(plotdata)

            xplot = plotdata['scenarioYear']
            yplot = plotdata['BOARDINGS'   ]

            trace1 = go.Scatter(
                x=xplot,
                y=yplot,
                mode='lines',
                name= modeNames[modes.index(m)],
                stackgroup='one',
                groupnorm='percent' # sets the normalization for the sum of the stackgroup
            )
            data.append(trace1)


    layout = go.Layout(
        #title=tdmVersionWithDate + ' Boardings by Mode',
        yaxis=dict(
            title='Percent of Total Boardings'#,
            #rangemode = 'tozero',
            #ticksuffix='%',
            #range=(0,100)
        ),
        xaxis=dict(
            title='Year'#,
            #range=(2018,2051)
        ),
        width=840,
        height=400
    )
    
    fig2 = go.Figure(data=data, layout=layout)
    py.offline.iplot(fig2)
py.offline.init_notebook_mode(connected=True)
```

Version 9.0.2 showed a slight increase in transit trips in 2042 and 2050 compared to version 9.0.1-patch2 (see @fig-hy-tr-all through @fig-hy-tr-lcl). The total transit trips in 2050 for version 9.0.2 is 337,000 daily trips compared to the version 9.0.1-patch2 model that showed 320,000 daily trips, which equates to 5% more trips. 

Commuter Rail saw the greatest increase in trips, some of which were new trips and some that had shifted from Express Bus to Commuter Rail. The shift from Express Bus to Commuter Rail is primarily due to the improvements in commuter rail speeds and to the additional stop in Bluffdale. These improvements make Commuter Rail more attractive and accessible which draws trips away from Express Bus since they compete for trips in similar markets.

BRT saw a slight increase in future trips. Light Rail, Core Route, and Local Bus trips remained relatively unchanged.


::: {.panel-tabset}

<!--'4a: Local Bus','4b: Core Bus','4c: Express Bus','4d: Bus-Rapid Transit','4e: Light-Rail Transit','4f: Commuter-Rail Transit'-->

#### All Modes
```{python}
#| label: fig-hy-tr-all
#| fig-cap: "Daily Transit Ridership - All Modes"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4: Transit'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

#### Commuter Rail
```{python}
#| label: fig-hy-tr-crt
#| fig-cap: "Daily Transit Ridership - Commuter-Rail Transit"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4f: Commuter-Rail Transit'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

#### Light Rail
```{python}
#| label: fig-hy-tr-lrt
#| fig-cap: "Daily Transit Ridership - Light-Rail Transit"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4e: Light-Rail Transit'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

#### Bus Rapid Transit
```{python}
#| label: fig-hy-tr-brt
#| fig-cap: "Daily Transit Ridership - Bus Rapid Transit"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4d: Bus-Rapid Transit'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

#### Express Bus
```{python}
#| label: fig-hy-tr-exp
#| fig-cap: "Daily Transit Ridership - Express Bus"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4c: Express Bus'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

#### Core Bus
```{python}
#| label: fig-hy-tr-cor
#| fig-cap: "Daily Transit Ridership - Core Bus"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4b: Core Bus'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

#### Local Bus
```{python}
#| label: fig-hy-tr-lcl
#| fig-cap: "Daily Transit Ridership - Local Bus"
#| cap-location: margin

update_plot(
    [modelOld, modelNew], 
    ['RTP'], 
    ['4a: Local Bus'], 
    ['HBC', 'HBO', 'HBS', 'HBW', 'NHB'], 
    ['Pk','Ok']
)
```

:::
