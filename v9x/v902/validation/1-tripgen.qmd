---
title: Trip Generation
echo: false
warning: false
message: false
---

Trip Generation validation was considered for both production ratios and relative shares.

## Ratios

Validation for production ratios looked at three sets of measures: productions-to-household ratios (@fig-prod-hh), total trips (@fig-ptrip-valid), and trip balance ratios (@fig-prod-prod). The sources of the data include the Utah Household Travel Survey from 2012 (2012 HTS), the base year model (BY 2019 Model), and the National Household Travel Survey from 2017 with data from the Mountain Census Division (2017 NHTS - Mountain).

The model shows an average 4.01 trips per person which is slightly higher than the 2017 NHTS - Mountain average of 3.54. The model also shows an average 12.4 trips per household which is higher than the 2017 NHTS - Mountain average of 9.1. Utah, including the Wasatch Front, has a significantly higher average household size of 3.09 persons per household when compared to the Mountain Census Division average of 2.58, which accounts for the differences when compared to the 2017 NHTS - Mountain averages. 

```{python}
debug = False

nameHTS = '2012 HTS'
nameMod = 'BY 2019 Model'
nameNHTS = '2017 NHTS - Mountain'

import pandas as pd
import numpy as np
# calculate the total number of houses in the household travel survey
hh_house_csv = pd.read_csv('../../../_large_files/v900/2012_HHSurvey-HHData_2022-09-29.csv', low_memory=False)
hh_house = hh_house_csv[['password','weight', 'h_CO_NAME_v30', 'h_SUBAREA_v30']]
hh_house = hh_house[hh_house['h_SUBAREA_v30'] == 1]
hh_houses_sum = hh_house.groupby(['h_CO_NAME_v30'])['weight'].agg('sum').reset_index()
hh_survey_tot_houses = sum(hh_houses_sum['weight'])
if debug: print('HTS Total Households: ' + str(hh_survey_tot_houses))

# calculate thte total number of people in the household travel survey
hh_peeps = hh_house_csv[['password','weight','h_CO_NAME_v30','h_SUBAREA_v30',' Pop_2010 ']]
hh_peeps = hh_peeps.rename(columns={' Pop_2010 ': 'Pop_2010'})
hh_peeps = hh_peeps[hh_peeps['h_SUBAREA_v30'] == 1]
hh_survey_tot_pop = sum(hh_peeps['Pop_2010'])
if debug: print('HTS Total Population: ' + str(hh_survey_tot_pop))

# calculate the number of II productions in the Household Travel Survey
hh_trips_csv = pd.read_csv('../../../_large_files/v900/2012_HHSurvey-TripData_2022-11-21.csv', low_memory=False)
hh_trips_purps = hh_trips_csv[['password','weight','h_CO_NAME_v30','h_SUBAREA_v30','p_SUBAREA_v30','a_SUBAREA_v30','PURP7_t']]
hh_ii = hh_trips_purps[hh_trips_purps['h_SUBAREA_v30'] == 1]
hh_ii = hh_ii[hh_ii['p_SUBAREA_v30'] == 1]
hh_ii = hh_ii[hh_ii['a_SUBAREA_v30'] == 1]
hh_ii = hh_ii.groupby(['PURP7_t'])['weight'].agg('sum').reset_index()
if debug: print('HTS Total II Productions: ' + str(hh_ii['weight'].sum()))
if debug: print('HTS II Productions per Household: ' + str(hh_ii['weight'].sum() / hh_survey_tot_houses))
if debug: print('HTS II Productions per Population: ' + str(hh_ii['weight'].sum() / hh_survey_tot_pop))

# calculate visitor NHB II Trip Ends and add to resident II trips
hh_ii_v = hh_trips_purps[hh_trips_purps['h_SUBAREA_v30'].isin([0,2,3,4])]
hh_ii_v = hh_ii_v[hh_ii_v['p_SUBAREA_v30'] == 1]
hh_ii_v = hh_ii_v[hh_ii_v['a_SUBAREA_v30'] == 1]
hh_ii_v = hh_ii_v.groupby(['PURP7_t'])['weight'].agg('sum').reset_index()
hh_ii_v = hh_ii_v.rename(columns = {'weight':'weight_2'})
if debug: print('Visitor II trips: ' + str(hh_ii_v['weight_2'].sum()))
hh_ii = pd.merge(hh_ii, hh_ii_v, how = 'left', on ='PURP7_t')
hh_ii = hh_ii.fillna(0)
hh_ii['weight'] = hh_ii['weight'] + hh_ii['weight_2']
hh_ii = hh_ii.drop(columns={'weight_2'})
if debug: print('HTS II + Visitor Trips: ' + str(hh_ii['weight'].sum()))

# calculate the number of IX productions in the Household Travel Survey
hh_ix = hh_trips_purps[hh_trips_purps['h_SUBAREA_v30'] == 1]
hh_ix = hh_ix[hh_ix['p_SUBAREA_v30'] == 1]
hh_ix = hh_ix[hh_ix['a_SUBAREA_v30'].isin([-1,0,2,3,4])]
hh_ix = hh_ix.groupby(['PURP7_t'])['weight'].agg('sum').reset_index()
hh_ix_tot = sum(hh_ix['weight'])
hh_ix = pd.DataFrame([['IX',hh_ix_tot]],columns=['PURP7_t','weight'])
if debug: print('HTS IX Productions: ' + str(hh_ix['weight'].sum()))

# calculate the total number of production in Household Travel Survey
hh_ii_ix = pd.concat([hh_ii,hh_ix])
hh_tot = sum(hh_ii_ix['weight'])
hh_tot = pd.DataFrame([['Total',hh_tot]], columns = ['PURP7_t','weight'])
if debug: print('HTS Total Productions: ' + str(hh_tot['weight'].sum()))
hh_ii_ix = pd.concat([hh_ii_ix,hh_tot]).reset_index().drop(columns={'index'})
hh_ii_ix['Data Source'] = nameHTS
hh_ii_ix = hh_ii_ix.rename(columns={'PURP7_t':'Purpose', 'weight':'Trips'})
hh_ii_ix['ratio'] = round(hh_ii_ix['Trips'] / hh_survey_tot_houses, 2)
if debug: display(hh_ii_ix)
```

```{python}
from dbfread import DBF
# calculate the total number of trip end productions for the modeled data
mod_pa = pd.DataFrame(DBF(r'data/2-tripgen/pa.dbf',load=True))
mod_pa = mod_pa.filter(regex='_P')
mod_pa['HBSCH_P'] = mod_pa['HBSCH_PR_P'] + mod_pa['HBSCH_SC_P']
mod_pa = mod_pa[['HBW_P','HBSHP_P','HBOTH_P','HBSCH_P','NHBW_P','NHBNW_P','IX_P']]
mod_pa = mod_pa.rename(columns=lambda x: x.rstrip('_P'))
mod_pa = mod_pa.rename(columns={'HBSH':'HBShp', 'HBOTH':'HBOth','HBSCH':'HBSch'})
if debug: display(mod_pa.sum())

# summarize the data
sumdf = mod_pa.sum()
mod_sum = pd.DataFrame(sumdf,columns=['Trips']).reset_index().rename(columns = {'index':'Purp'})
mod_sum = mod_sum.rename(columns={'Purp':'Purpose'})
if debug: display(mod_sum)

if debug: print('WARNING--USING HARDCODED ADDTRIPTABLE VALUES FOR HBC AND TTUNIQUE')
#### WATCH OUT FOR HARD CODED VALUES FROM ADDTRIPTABLE.MTX ####
mod_sum_hbc = pd.DataFrame([['HBC',120706]], columns = ['Purpose','Trips'])
mod_sum_hbo = pd.DataFrame([['HBOth',40132]], columns = ['Purpose','Trips'])

mod_sum = pd.concat([mod_sum,mod_sum_hbc,mod_sum_hbo]).groupby(['Purpose'],as_index=False).agg(Trips=('Trips','sum'))
mod_sum_tot = mod_sum['Trips'].sum()
mod_sum_tot = pd.DataFrame([['Total',mod_sum_tot]], columns = ['Purpose','Trips'])
mod_sum = pd.concat([mod_sum,mod_sum_tot]).reset_index().drop(columns={'index'})

mod_sum['Data Source'] = nameMod

if debug: display(mod_sum)

# read in SE data for total households
se_data = pd.DataFrame(DBF(r'data/2-tripgen/SE_File_v902_SE19_Net19.dbf',load=True))
se_hh_sum = sum(se_data['TOTHH'])
se_pop_sum = sum(se_data['HHPOP'])
mod_sum['ratio'] = round(mod_sum['Trips'] / se_hh_sum, 2)
if debug: display(mod_sum)
```

```{python}
prod_hh_ratio = pd.concat([hh_ii_ix,mod_sum])

prod_hh_ratio_nototal = prod_hh_ratio[prod_hh_ratio['Purpose']!='Total']
#display(prod_hh_ratio)
```

```{python}
#| include: False

import plotly.express as px
colors2 = {nameHTS:'steelblue', nameMod:'forestgreen', nameNHTS: 'gray'}
fig = px.bar(prod_hh_ratio_nototal, 
    x="Purpose", 
    y="ratio",
    text="ratio",    
    color='Data Source', 
    barmode='group', 
    height=500,
    color_discrete_map=colors2)
fig.update_yaxes(title='Production to Household Ratio')
fig.update_xaxes(title=None, tickangle=0, showticklabels=True, ticks='inside', ticklen=10)
fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False, texttemplate='%{y:.2f}')
fig
```


```{python}
#| label: fig-prod-hh
#| fig-cap: "Productions to Households Ratios -- Total Trip Ends (II + IX)."
#| cap-location: margin
fig
```


```{python}
import numpy as np
prod_hh_ratio3 = prod_hh_ratio[prod_hh_ratio['Purpose'] == 'Total']
prod_hh_ratio3['pop'] = np.where(prod_hh_ratio3['Data Source'] == nameHTS, hh_survey_tot_pop, se_pop_sum)
prod_hh_ratio3['hh'] = np.where(prod_hh_ratio3['Data Source'] == nameHTS, hh_survey_tot_houses, se_hh_sum)
prod_hh_ratio3['ratio2'] = round(prod_hh_ratio3['Trips'] / prod_hh_ratio3['pop'],3)
prod_hh_ratio3['ratio3'] = round(prod_hh_ratio3['pop'] / prod_hh_ratio3['hh'],3)

if debug: display(prod_hh_ratio3)

trip_valid = prod_hh_ratio3[['Data Source','ratio','ratio2','ratio3']]
#nhts2009 = pd.DataFrame([['2009 NHTS',9.5,3.79]], columns = ['Data Source','ratio','ratio2'])

# FROM SOURCE TABLES FROM NHTS (IN DATA FOLDER)
nhts2017mountainwest_dailypersontrips = 28418 * 1000000 / 365
nhts2017mountainwest_households = 8514 * 1000
nhts2017mountainwest_population = 21996 * 1000
nhts2017_tripsperhouseholdsperday = round(nhts2017mountainwest_dailypersontrips / nhts2017mountainwest_households, 2)
nhts2017_tripsperpopulationperday = round(nhts2017mountainwest_dailypersontrips / nhts2017mountainwest_population, 2)
nhts2017_hhsize = round(nhts2017mountainwest_population/nhts2017mountainwest_households,3)
nhts2017 = pd.DataFrame([[nameNHTS,nhts2017_tripsperhouseholdsperday,nhts2017_tripsperpopulationperday,nhts2017_hhsize]], columns = ['Data Source','ratio','ratio2','ratio3'])

trip_valid = pd.concat([trip_valid,nhts2017])
trip_valid = trip_valid.rename(columns={'ratio':'Total Productions / Household', 'ratio2': 'Total Productions / Person', 'ratio3': 'Household Size'})
trip_valid = trip_valid.melt(id_vars=['Data Source'], value_vars = ['Total Productions / Household', 'Total Productions / Person', 'Household Size'], var_name = 'RatioName', value_name = 'RatioValue')
```

```{python}
#| include: False
import plotly.express as px
fig2 = px.bar(trip_valid, 
    x="RatioName", 
    y="RatioValue",
    text="RatioValue",
    color='Data Source', 
    barmode='group', 
    height=500,
    color_discrete_map=colors2)
fig2.update_yaxes(title='Ratio')
fig2.update_xaxes(title=None, tickangle=0, showticklabels=True, ticks='inside', ticklen=10)
fig2.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False, texttemplate=['%{y:.1f}','%{y:.2f}','%{y:.2f}'])
fig2
```


```{python}
#| label: fig-ptrip-valid
#| fig-cap: "Total Trip Validation"
#| cap-location: margin
fig2
```


```{python}
# calculate the trip balance based on the productions to household ratio data
trip_balance = prod_hh_ratio[['Purpose','Trips','Data Source']]
trip_balance = trip_balance.pivot(index='Data Source', columns='Purpose', values='Trips').reset_index()
trip_balance['NHB'] = trip_balance['NHBW'] + trip_balance['NHBNW']
trip_balance['HBO'] = trip_balance['HBOth'] + trip_balance['HBShp']
trip_balance['NHB/HBW'] = trip_balance['NHB'] / trip_balance['HBW']
trip_balance['HBO/HBW'] = trip_balance['HBO'] / trip_balance['HBW'] 
trip_balance['HBO/NHB'] = trip_balance['HBO'] / trip_balance['NHB']
trip_balance = trip_balance[['Data Source','NHB/HBW', 'HBO/HBW', 'HBO/NHB']]
trip_balance = pd.melt(trip_balance, id_vars=['Data Source'], value_vars=['NHB/HBW','HBO/HBW','HBO/NHB'], var_name='Purpose', value_name='Ratio')
trip_balance['Ratio'] = round(trip_balance['Ratio'],2)
```

```{python}
#| include: False
import plotly.express as px
fig3 = px.bar(trip_balance, 
    x="Purpose", 
    y="Ratio",
    text="Ratio",
    color='Data Source', 
    barmode='group', 
    height=500,
    color_discrete_map=colors2,
    template='simple_white')
fig3.update_yaxes(title='Ratios')
fig3.update_xaxes(title=None, tickangle=0, showticklabels=True, ticks='inside', ticklen=10)
fig3.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False, texttemplate='%{y:.2f}')
fig3
```

```{python}
#| label: fig-prod-prod
#| fig-cap: "Trip Balance Ratios"
#| cap-location: margin
fig3
```

## Relative Shares

Validation for production relative shares considered the reasonableness of relative shares as shown in @tbl-rel-share. The relative share between HBW, HBO and NHB trips looks reasonable with HBW at about 14% of the total and the highest share going to HBO. Commercial vehicles account for about 22% of the total trips generated by the model. This is within the expected range for an urban area like the Wasatch Front. IX and XI trips account for around 2% of the total trip generation. This also appears to be reasonable.

::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-rel-share
#| tbl-cap: Relative Shares of Trip Productions
#| echo: False
import pandas as pd
from tabulate import tabulate
from IPython.display import Markdown

# Define the data
data = [
    ['HBW'           , '1,758,104' , '14.1%' ],
    ['HBO'           , '5,317,476' , '42.5%' ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HBShp'    , '908,733'   , '7.3%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HBOth'    , '3,719,191' , '29.7%' ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HBScK6'   , '365,084'   , '2.9%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HBsc712'  , '324,468'   , '2.6%'  ],
    ['NHB'           , '2,405,720' , '19.2%' ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NHBW'     , '812,855'   , '6.5%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NHBNW'    , '1,592,865' , '12.7%' ],
    ['Total Person'  , '9,481,300' , '75.8%' ],
    ['Total External', '172,855'   , '1.4%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IX'       , '78,057'    , '0.6%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XI'       , '94,798'    , '0.8%'  ],
    ['Total Truck'   , '2,802,234' , '22.4%' ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LT'       , '1,553,653' , '12.4%' ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MD'       , '884,558'   , '7.1%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HV'       , '364,023'   , '2.9%'  ],
    ['Total IX Truck', '21,750'    , '0.2%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IX MD'    , '10,716'    , '0.1%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IX HV'    , '11,034'    , '0.1%'  ],
    ['Total XI Truck', '30,741'    , '0.2%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XI MD'    , '14,372'    , '0.1%'  ],
    ['&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XI HV'    , '16,369'    , '0.1%'  ],
    ['Telecommute Share of HBW' , '69,175', '0.6%'],
    ['Telecommute Share of NHBW', '19,552', '0.2%'],
    ['TOTAL'         , '12,508,880', '100.0%']
]

# Create a pandas DataFrame
df = pd.DataFrame(data, columns=['Purpose', 'Production', 'Share'])

# Convert the DataFrame to a markdown table
headers = ['Purpose', 'Production', 'Share']
Markdown(tabulate(df, headers=headers, tablefmt="pipe", colalign=("left",)*len(headers), showindex=False)) 
```
:::
:::
