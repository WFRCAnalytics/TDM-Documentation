---
margin-header: Version 9.0.0 - Calibration/Validation
echo: false
warning: false
message: false
---

# Trip Distribution
The validation results for the Trip Distribution portion of the model are shown in this section. The observed data comes from the 2012 Household Survey. 


```{python}
import pandas as pd
gc_csv = pd.read_csv('data/distrib/v9-gencost-mod-obs.csv')
dist_csv = pd.read_csv('data/distrib/v9-dist-mod-obs.csv')
time_csv = pd.read_csv('data/distrib/v9-time-mod-obs.csv')
```

```{python}
def flip_table(df_csv, unit, varble):
    df_csv['BIN'] = df_csv[unit]

    mod = df_csv.loc[:, df_csv.columns.str.contains('Model') | (df_csv.columns == 'BIN')]
    mod.columns = mod.columns.str.replace('-Model', '')
    mod_melt = mod.melt(id_vars= 'BIN', value_vars= ['HBW','HBShp','HBOth','HBSch_Pr','HBSch_Sc','LT', 'MD', 'HV','IX','XI', 'IX_MD', 'IX_HV', 'XI_MD', 'XI_HV', 'IXXI', 'IXXI_MD', 'IXXI_HV', 'Tel_HBW', 'Tel_NHBW'], var_name= 'Purpose', value_name = 'FREQ' )
    mod_melt['DataSource'] = 'Model'
    mod_melt['Variable'] = varble  

    obs = df_csv.loc[:, df_csv.columns.str.contains('Observed') | (df_csv.columns == 'BIN')]
    obs.columns = obs.columns.str.replace('-Observed', '')
    obs_melt = obs.melt(id_vars= 'BIN', value_vars= ['HBW','HBShp','HBOth','HBSch_Pr','HBSch_Sc','LT', 'MD','HV','IX','XI'], var_name= 'Purpose', value_name = 'FREQ' )
    obs_melt['DataSource'] = 'Observed'
    obs_melt['Variable'] = varble

    comb = pd.concat([mod_melt,obs_melt])

    return comb
```

```{python}
gc_melt = flip_table(gc_csv, 'Min', 'GenCost')
dist_melt = flip_table(dist_csv, 'Mile', 'Distance')
time_melt = flip_table(time_csv, 'Min', 'Time')
gcdtime = pd.concat([gc_melt, dist_melt, time_melt])
```

```{python}
#CALCUATE TRIP LENGTH AVERAGES AS TABLE
gcdtime['BINMIDxFREQ'] = (gcdtime['BIN'] + 1) * gcdtime['FREQ']
gcdtime_Stats = (gcdtime.groupby(['DataSource','Variable','Purpose'],as_index=False).agg(FREQ_SUM=('FREQ','sum'),AVG_TRIP_LEN=('BINMIDxFREQ','sum'))) # ADDING BINMIDxFREQ to get Avg Trip Length only works if FREQ sum = 1
```

```{python}
import numpy as np
mainPurposes = ['HBW','HBShp','HBOth','HBSch_Pr','HBSch_Sc','LT', 'MD','HV']
externals = ['IX','XI', 'IX_MD', 'IX_HV', 'XI_MD', 'XI_HV', 'IXXI', 'IXXI_MD', 'IXXI_HV']
telecommute = ['Tel_HBW', 'Tel_NHBW']

gcdtime_Stats['PurpType'] = np.where(gcdtime_Stats['Purpose'].isin(mainPurposes), 'MainPurposes', np.where(gcdtime_Stats['Purpose'].isin(externals), 'Externals', 'Telecommute'))

gc_Stats = gcdtime_Stats.loc[gcdtime_Stats['Variable'] == 'GenCost']
```

**Figure 1: Average Trip Length between model and observed.**
```{python}
ojs_define(dataStats = gcdtime_Stats)
```

```{ojs}
viewof varSelect = Inputs.select(new Map([['Generalized Cost','GenCost'], ['Distance', 'Distance'], ['Time', 'Time']]), {value: 'Variable', label: "Variable"})

viewof purpSelect  = Inputs.select(new Map([['Main Purposes', 'MainPurposes'], ['External Purposes', 'Externals'], ['Telecommute Purposes', 'Telecommute']]), {value: 'PurpType', label: "Purpose Set"});
```

```{ojs}
dataLT = transpose(dataStats)
filtered_data = dataLT.filter(function(dataL) {
    return varSelect == dataL.Variable &&
           purpSelect == dataL.PurpType;
})
```

```{ojs}
import {GroupedBarChart} from "@d3/grouped-bar-chart"
import {Legend, Swatches} from "@d3/color-legend"
import {howto, altplot} from "@d3/example-components"
```

::: {.panel-tabset}

### Plot
```{ojs}
//https://observablehq.com/@d3/grouped-bar-chart
key = Legend(chart.scales.color, {title: "Data Source"})
chart = GroupedBarChart(filtered_data, {
    x: d => d.Purpose,
    y: d => d.AVG_TRIP_LEN,
    z: d => d.DataSource,
    yLabel: "Average Trip Length",
    //yDomain: [0,1],
    zDomain: ['Model','Observed'],
    width,
    height: 500,
    colors: ["#376092", "#77933c"]
})
```


### Table
```{ojs}
//| echo: false
Inputs.table(filtered_data)
```

:::