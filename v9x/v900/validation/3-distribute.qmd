---
title: Trip Distribution
echo: false
warning: false
message: false40
---

Modeled average trip lengths for the base year were compared to the 2012 Household Travel Survey. The model was validated for  for distance, time, and generalized cost using the following measures: 

- Average Trip Lengths
- Trip Length Frequencies


## Average Trip Lengths

The following figure shows the average trip lengths the modeled and observed time, distance, and generalized cost.

::: {.content-visible when-format="html"}
```{python}
import pandas as pd
gc_csv = pd.read_csv('data/3-distribute/v9-gencost-mod-obs.csv')
dist_csv = pd.read_csv('data/3-distribute/v9-dist-mod-obs.csv')
time_csv = pd.read_csv('data/3-distribute/v9-time-mod-obs.csv')
```

```{python}
def flip_table(df_csv, unit, varble):
    df_csv['BIN'] = df_csv[unit]

    mod = df_csv.loc[:, df_csv.columns.str.contains('Model') | (df_csv.columns == 'BIN')]
    mod.columns = mod.columns.str.replace('-Model', '')
    mod_melt = mod.melt(id_vars= 'BIN', value_vars= ['HBW','HBShp','HBOth','HBSch_Pr','HBSch_Sc','LT', 'MD', 'HV','IX','XI', 'IX_MD', 'IX_HV', 'XI_MD', 'XI_HV', 'IXXI', 'IXXI_MD', 'IXXI_HV', 'Tel_HBW', 'Tel_NHBW'], var_name= 'Purpose', value_name = 'FREQ' )
    mod_melt['DataSource'] = 'Model'
    mod_melt['Variable'] = varble  

    obs = df_csv.loc[:, df_csv.columns.str.contains('Observed') | (df_csv.columns == 'BIN')]
    obs.columns = obs.columns.str.replace('-Observed', '')
    obs_melt = obs.melt(id_vars= 'BIN', value_vars= ['HBW','HBShp','HBOth','HBSch_Pr','HBSch_Sc','LT', 'MD','HV','IX','XI'], var_name= 'Purpose', value_name = 'FREQ' )
    obs_melt['DataSource'] = 'Observed'
    obs_melt['Variable'] = varble

    comb = pd.concat([mod_melt,obs_melt])

    return comb
```

```{python}
gc_melt = flip_table(gc_csv, 'Min', 'GenCost')
dist_melt = flip_table(dist_csv, 'Mile', 'Distance')
time_melt = flip_table(time_csv, 'Min', 'Time')
gcdtime = pd.concat([gc_melt, dist_melt, time_melt])
```

```{python}
#CALCUATE TRIP LENGTH AVERAGES AS TABLE
gcdtime['BINMIDxFREQ'] = (gcdtime['BIN'] + 1) * gcdtime['FREQ']
gcdtime_Stats = (gcdtime.groupby(['DataSource','Variable','Purpose'],as_index=False).agg(FREQ_SUM=('FREQ','sum'),AVG_TRIP_LEN=('BINMIDxFREQ','sum'))) # ADDING BINMIDxFREQ to get Avg Trip Length only works if FREQ sum = 1
```

```{python}
import numpy as np
mainPurposes = ['HBW','HBShp','HBOth','HBSch_Pr','HBSch_Sc','LT', 'MD','HV']
externals = ['IX','XI', 'IX_MD', 'IX_HV', 'XI_MD', 'XI_HV', 'IXXI', 'IXXI_MD', 'IXXI_HV']
telecommute = ['Tel_HBW', 'Tel_NHBW']

gcdtime_Stats['PurpType'] = np.where(gcdtime_Stats['Purpose'].isin(mainPurposes), 'MainPurposes', np.where(gcdtime_Stats['Purpose'].isin(externals), 'Externals', 'Telecommute'))

gc_Stats = gcdtime_Stats.loc[gcdtime_Stats['Variable'] == 'GenCost']
```

```{python}
ojs_define(dataStats = gcdtime_Stats)
```

```{ojs}
viewof varSelect = Inputs.select(new Map([['Generalized Cost','GenCost'], ['Distance', 'Distance'], ['Time', 'Time']]), {value: 'Variable', label: "Variable"})

viewof purpSelect  = Inputs.select(new Map([['Internal Trip Purposes', 'MainPurposes'], ['External Trip Purposes', 'Externals']]), {value: 'PurpType', label: "Purpose Set"});
```

```{ojs}
dataLT = transpose(dataStats)
filtered_data = dataLT.filter(function(dataL) {
    return varSelect == dataL.Variable &&
           purpSelect == dataL.PurpType;
})
```

```{ojs}
import {GroupedBarChart} from "@d3/grouped-bar-chart"
import {Legend, Swatches} from "@d3/color-legend"
import {howto, altplot} from "@d3/example-components"
```

::: {.panel-tabset}

### Plot
```{ojs}
//|echo: False
//https://observablehq.com/@d3/grouped-bar-chart
key = Legend(chart.scales.color, {title: "Data Source"})
```

```{ojs}
//|label: fig-ave-trip-length
//|fig-cap: Average Trip Length between model and observed.
//|echo: False
chart = GroupedBarChart(filtered_data, {
    x: d => d.Purpose,
    y: d => d.AVG_TRIP_LEN,
    z: d => d.DataSource,
    yLabel: "Average Trip Length",
    //yDomain: [0,1],
    zDomain: ['Model','Observed'],
    width,
    height: 500,
    colors: ["#376092", "#77933c"]
})
```


### Table
```{ojs}
//| echo: false
Inputs.table(filtered_data)
```


:::

:::


::: {.content-hidden when-format="html"}
![Average Trip Length for Generalized Cost for Main Purposes.](_pictures/5-plot1.png){#fig-pdf-gc-purp height=40%}

![Average Trip Length for Generalized Cost for External Forces.](_pictures/5-plot2.png){#fig-pdf-gc-ext height=40%}

![Average Trip Length for Generalized Cost for Telecommuting.](_pictures/5-plot3.png){#fig-pdf-cg-tele height=40%}
:::

::: {.content-hidden when-format="html"}
![Average Trip Length for Distance for Main Purposes.](_pictures/5-plot4.png){#fig-pdf-dist-purp height=40%}

![Average Trip Length for Distance for External Forces.](_pictures/5-plot5.png){#fig-pdf-dist-ext height=40%}

![Average Trip Length for Distance for Telecommuting.](_pictures/5-plot6.png){#fig-pdf-dist-tele height=40%}
:::

::: {.content-hidden when-format="html"}
![Average Trip Length for Time for Main Purposes.](_pictures/5-plot7.png){#fig-pdf-time-purp height=40%}

![Average Trip Length for Time for External Forces.](_pictures/5-plot8.png){#fig-pdf-time-ext height=40%}

![Average Trip Length for Time for Telecommuting.](_pictures/5-plot9.png){#fig-pdf-time-tele height=40%}
:::




```{python}
debug = False

import pandas as pd  
import os
import numpy as np
from scipy import special
import time
import math as ms

filenameTLFObs  = 'data/5-assignhwy/tlf/dfTLF_Obs_wSmoothed_20221209-075253.csv'
observedStage = 'v9 Final Smoothing'

folderTDMTLFLoc = 'data/5-assignhwy/tlf'

binsize = 2

# a set of column renaming to be used to put all columns in consistent naming
colRenames ={'HBOTH':'HBOth',
             'HBSHP':'HBShp',
             'HBSCHPR' :'HBSchPr',
             'HBSCHSC' :'HBSchSc',
             'HBSCH_PR':'HBSchPr',
             'HBSCH_SC':'HBSchSc',
             'HBSch_Pr':'HBSchPr',
             'HBSch_Sc':'HBSchSc'}

# some trip purposes are added together for information purposes
dfTripPurpSubtotals = pd.DataFrame([
    ['HBOth','HBO' ],
    ['HBShp','HBO' ],
    ['NHBW' ,'NHB' ],
    ['NHBNW','NHB' ],
    ['IX'   ,'IXXI'],
    ['XI'   ,'IXXI']
],columns=(['TRIPPURP','TRIPPURP_SUB']))
if debug: display(dfTripPurpSubtotals)
```

```{python}
# read in observed TLF data to be used
dfTLF_Obs = pd.read_csv(filenameTLFObs)

#filter by the STAGE for 
dfTLF_Obs = dfTLF_Obs[dfTLF_Obs['STAGE']==observedStage].copy()
dfTLF_Obs = dfTLF_Obs.drop(columns=('STAGE'))

dfTLF_Obs.rename(columns={'FREQ':'freqObs'}, inplace=True)

if debug: display(dfTLF_Obs)
```

```{python}
# show max bin size for TLF type to use in updating TDM TLF code
if debug: display(dfTLF_Obs[dfTLF_Obs['freqObs']>0].groupby(['TLFTYPE'],as_index=False).agg(MAXBIN=('BIN','max')))
```

```{python}
# Check TLF Observed. freqObs should all sum to 1! Also show average trip length
# add one to BIN to get bin midpoint
dfTLF_Obs['BINMIDxfreqObs'] = (dfTLF_Obs['BIN'] + 1) * dfTLF_Obs['freqObs']
dfTLF_Obs_Stats = dfTLF_Obs.groupby(['TRIPPURP','TLFTYPE'],as_index=False).agg(freqObs_SUM=('freqObs','sum'),AVG_TRIP_LEN=('BINMIDxfreqObs','sum'))
dfTLF_Obs.drop(columns=('BINMIDxfreqObs'), inplace=True)
if debug: display(dfTLF_Obs_Stats)
```

```{python}

tlfs=['Cost','Dist','Time']

dfTLFTDMTrips = pd.DataFrame()

for tlf in tlfs:
    
    # read in csv for tlf
    dfRead = pd.read_csv(folderTDMTLFLoc + '/TLF_' + tlf + '.csv')

    # make sure id column is always same: BIN
    dfRead.rename(columns={';BIN':'BIN',';MINUTE':'BIN','Mile':'BIN','Mil':'BIN','Min':'BIN','Bin':'BIN'}, inplace=True)
    # rename columns
    dfRead.rename(columns=colRenames,inplace=True)

    dfRead = pd.melt(dfRead, id_vars=['BIN'], value_vars=dfRead.columns[1:].tolist(), ignore_index=False, var_name='TRIPPURP', value_name='TRIPS')

    # set TLF value, rename Cost to GC
    if tlf=='Cost':
        dfRead['TLFTYPE'] = 'GC'
    else:
        dfRead['TLFTYPE'] = tlf

    # reorder columns
    dfRead = dfRead[['TLFTYPE','TRIPPURP','BIN','TRIPS']]

    # concat data into single dataframe
    dfTLFTDMTrips = pd.concat([dfTLFTDMTrips, dfRead], ignore_index=True)

if debug: display(dfTLFTDMTrips)

# create subtotals
dfTLFTDMTripsForSubtotals = pd.DataFrame.merge(dfTLFTDMTrips, dfTripPurpSubtotals, on=('TRIPPURP'))
dfTLFTDMTripsForSubtotals = dfTLFTDMTripsForSubtotals.groupby(['TLFTYPE','TRIPPURP_SUB','BIN'],as_index=False).agg(TRIPS=('TRIPS','sum'),COUNT=('TRIPS','size'))
dfTLFTDMTripsForSubtotals = dfTLFTDMTripsForSubtotals[['TLFTYPE','TRIPPURP_SUB','BIN','TRIPS']]
dfTLFTDMTripsForSubtotals = dfTLFTDMTripsForSubtotals.rename(columns={'TRIPPURP_SUB':'TRIPPURP'})
if debug: display (dfTLFTDMTripsForSubtotals)

# concat subtotals
dfTLFTDMTrips = pd.concat([dfTLFTDMTrips,dfTLFTDMTripsForSubtotals], ignore_index=True)
if debug: display(dfTLFTDMTrips)

# calculated collapsed bins
from math import floor
def round_to_binsize(x):
    return int(binsize * floor(float(x)/binsize))
dfTLFTDMTrips['BIN_COLLAPSE'] = dfTLFTDMTrips['BIN'].apply(lambda x: round_to_binsize(x))
if debug: display(dfTLFTDMTrips)

# aggregate to collapsed bins
dfTLFTDMTrips = dfTLFTDMTrips.groupby(['TLFTYPE','TRIPPURP','BIN_COLLAPSE'], as_index=False).agg(TRIPS=('TRIPS','sum'))
dfTLFTDMTrips = dfTLFTDMTrips.rename(columns={'BIN_COLLAPSE':'BIN'})
if debug: display(dfTLFTDMTrips)

# calculate percent distribution
dfTLFTDMTripTotals = dfTLFTDMTrips.groupby(['TLFTYPE','TRIPPURP'], as_index=False).agg(TRIP_TOTAL=('TRIPS','sum'))
if debug: display(dfTLFTDMTripTotals)

# join to toals
dfTLFTDMTripDist = pd.DataFrame.merge(dfTLFTDMTrips, dfTLFTDMTripTotals, on=('TLFTYPE','TRIPPURP'))
dfTLFTDMTripDist['freqMod'] = dfTLFTDMTripDist['TRIPS'] / dfTLFTDMTripDist['TRIP_TOTAL']
if debug: display(dfTLFTDMTripDist)

dfTLF_TDM = dfTLFTDMTripDist[['TLFTYPE','TRIPPURP','BIN','freqMod']]
if debug: display(dfTLF_TDM)

# check to see if add up to 1.0
dfCheck = dfTLF_TDM.groupby(['TLFTYPE','TRIPPURP'], as_index=False).agg(freqMod_SUM=('freqMod','sum'))
# only display results out of range
if debug: display('Not adding to 1 (if empty dataset, YAY!!!):')
if debug: display(dfCheck[(dfCheck['freqMod_SUM']<0.9999999) | (dfCheck['freqMod_SUM']>1.0000001)])

#dfTLF_TDM.to_csv(filename, index=False)

```

```{python}
#Merge together all Modeled data and Observed data
dfObsModelMerge = pd.DataFrame.merge(dfTLF_Obs, dfTLF_TDM, on=('BIN','TRIPPURP','TLFTYPE'),how='outer')
dfObsModelMerge.fillna(0, inplace=True)

dfObsModelMerge = dfObsModelMerge.melt(id_vars=('TRIPPURP','TLFTYPE','BIN'), value_vars=('freqObs','freqMod'), var_name='freqSource', value_name='freq')

if debug: display(dfObsModelMerge)
```

```{python}
ojs_define(freq = dfObsModelMerge)
```




## Trip Length Frequencies

Modeled trip lengths for the base year were compared to the 2012 Household Travel Survey. The following figures shows the modeled and observed time and distance average trip lengths and trip length frequencies.


```{ojs}

optionsTripPurp = 
[
    ['Home-Based Work'                   , 'HBW'    ],
    ['Home-Based Shopping'               , 'HBShp'  ],
    ['Home-Based Other'                  , 'HBOth'  ],
    ['Home-Based School - Primary'       , 'HBSchPr'],
    ['Home-Based School - Secondary'     , 'HBSchSc'],
    ['Non-Home-Based Work'               , 'NHBW'   ],
    ['Non-Home-Based Non-Work'           , 'NHBNW'  ],
    ['Light Trucks'                      , 'LT'     ],
    ['Medium Trucks'                     , 'MD'     ],
    ['Heavy Trucks'                      , 'HV'     ],
    ['Internal-to-External'              , 'IX'     ],
    ['External-to-Internal'              , 'XI'     ],
    ['Internal-to-External Light Trucks' , 'IX_LT'  ],
    ['Internal-to-External Medium Trucks', 'IX_MD'  ],
    ['Internal-to-External Heavy Trucks' , 'IX_HV'  ],
    ['External-to-Internal Light Trucks' , 'XI_LT'  ],
    ['External-to-Internal Medium Trucks', 'XI_MD'  ],
    ['External-to-Internal Heavy Trucks' , 'XI_HV'  ]
]

viewof vTripPurp = Inputs.select(new Map(optionsTripPurp), {value: 'HBW', label: "Trip Purpose:"})

viewof vTlfType = Inputs.select(new Map([['Distance','Dist'],['Time','Time'],['Generalized Cost','GC']]), {value: 'Dist', label: "Variable:"})


```

```{ojs}
freqT = transpose(freq)

freqT_filtered_Obs = freqT.filter(function(freqData) {
    return vTripPurp == freqData.TRIPPURP &&
    vTlfType == freqData.TLFTYPE &&
    'freqObs' == freqData.freqSource;
})

freqT_filtered_Mod = freqT.filter(function(freqData) {
    return vTripPurp == freqData.TRIPPURP &&
    vTlfType == freqData.TLFTYPE &&
    'freqMod' == freqData.freqSource;
})
```


```{ojs}

Plot.plot({
  grid: true,
  aspectRatio: 0.5,
  x: {label: 'Distance/Time/Cost', tickFormat: d => d, domain:[0,100]},
  y: {label: 'Frequency', tickFormat: f => `${Math.round(f * 100)}%`},
  marginRight:60,
  marginLeft: 60,
  style: {
    fontSize: 15
  },
  marginTop: 60,
  marginBottom: 60,
  marks: [
    Plot.line(
      freqT_filtered_Mod, {x: 'BIN', y: 'freq', stroke: "#376092", strokeWidth: 4}),
    Plot.line(
      freqT_filtered_Obs, {x: 'BIN', y: 'freq', stroke:  "#77933c",strokeWidth: 4}),
    Plot.frame({strokeOpacity: 0.2}),
    [
      Plot.text([`\n<font color="blue">   ——   Current Projection</font> \n\n   —  — Previous Projection`], {frameAnchor: "top-right", fontSize: 14})
    ]]
})
```