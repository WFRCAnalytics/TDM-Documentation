---
title: Mode Choice
echo: false
warning: false
message: false
---

The validation results for the Mode Choice portion of the model are shown in this section. The observed data comes from the Utah Transit Authority 2019 On-Board Survey as well as the 2012 Household Travel Survey. 

Results are summarized by the following categories:

- Mode Share
- Trips and Boardings


```{python}
#import libraries
import pandas as pd
import numpy as np
import os
from IPython.display import display, Markdown
import re
from dbfread import DBF

dirCalibConst = [r"data/calib_const/"]
```

```{python}
# GLOBAL VARIABLES

# path name for tdm
pnTdm    = 'A:/1 - TDM/3 - Model Dev/1 - WF/1 - Official Release/v9x/v9.0/WF TDM v9.0 - official/'

# file names for data tables
fnObs        = 'data/4-modechoice/2019 Final Weighted UTA OD Data - 2020-09-09_BH.csv'
fnHhs        = 'data/4-modechoice/TripData_June19_2013.csv'
fnTdmPk      = pnTdm + 'Scenarios/BY_2019/4_ModeChoice/4_Shares/v9_SE19_Net19_RegionShares_Pk.csv'
fnTdmOk      = pnTdm + 'Scenarios/BY_2019/4_ModeChoice/4_Shares/v9_SE19_Net19_RegionShares_Ok.csv'
fnTdmPaRoute = pnTdm + 'Scenarios/BY_2019/4_ModeChoice/3_TransitAssign/_v9_SE19_Net19_1_PA_Route.dbf'

namePurp   = 'TripPurpose'
namePeriod = 'Period'
nameVOwn   = 'VehicleOwnership'
nameMode   = 'Mode'
nameGroup  = 'Group'

# Obs define column names for grouping
colIdObs        = 'id'
colPurpObs      = 'Purp5_text'      #trip purpose
colPeriodObs    = 'PK_OK'           #period
colVOwnObs      = 'Veh_Cat3p'       #number of vehicles
colModeAcObs    = 'Ac_Mode_Model'   #access mode
colModeTrObs    = 'Linked_Mode_txt' #transit mode (highest in heirarchy)
colModeBoardObs = 'Surveyed_Mode'   #boarding mode (surveyed mode)
colTripsObs     = 'linked_weight'   #trip weight
colBoardObs     = 'unlinked_weight' #boarding weight

nameIdObs       = 'ID_Obs'
nameModeAccess  = 'Access Mode'
nameModeTransit = 'Transit Mode'
nameModeBoard   = 'Transit Mode - Surveyed'

labelModeTransit = 'Transit Mode Label'

nameTripsObs     = 'Trips_Obs'
nameBoardObs     = 'Boardings_Obs'
nameShareObs     = 'Share_Obs'
nameRecordsObs   = 'Records_Obs'

nameTripsObs    = 'TripsObserved'
nameTripsMod    = 'TripsModel'
nameShareObs    = 'ShareObserved'
nameShareMod    = 'ShareModel'
nameShareDiff   = 'ShareDiff'
nameBoardObs    = 'BoardingsObserved'
nameBoardMod    = 'BoardingsModel'
nameTxRatioObs  = 'TransferRatioObserved'
nameTxRatioMod  = 'TransferRatioModel'

#HHS define column names for grouping
colIDHHS     = 'password'
colPurpHHS   = 'trip_purpose_text'          #trip purpose
colPeriodHHS = 'depart_period'              #period
colVOwnHHS   = 'num_vehicles_cat'           #number of vehicles
colModeHHS   = 'main_mode_w_auto_occ_text'  #access mode
colTripsHHS  = 'weight'                     #trip weight

codeObsMode         = 'Mode'
codeHHSMode         = 'Mode'

nameIDHHS           = 'ID_HHS'
nameTripsHHS        = 'Trips_HHS'

nameModeMnMShare = 'Motorized / Non-Motorized'
nameModeATShare  = 'Auto / Transit'
nameModeDAShare  = 'Drive Alone / Shared Ride'
nameMode23Share  = 'Shared Ride # of Occupants'

nameShareHHS   = 'Share_HHS'
nameRecordsHHS = 'Records_HHS'

# TDM define column names for grouping
colTripCategory = 'TripCategory'
nameTripsTDM = 'Trips_TDM'
nameShareTDM = 'Share_TDM'
nameBoardTDM = 'Boardings_TDM'

# rename transit modes in Obs data to match 
dfTransitRename = pd.DataFrame(data={
       colModeTrObs: ['LCL','BRT1','EXP','BRT3','LRT','CRT'],
    nameModeTransit: ['LCL','COR' ,'EXP','BRT' ,'LRT','CRT'],
   labelModeTransit: ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT']
})

# Mode group definitions for household survey
dfHhsModes = pd.DataFrame(data={
         codeHHSMode: ['bike'         ,'walk'         ,'auto_sov'       ,'auto_occ2'             ,'auto_occ3p'             ,'transit'  ],
    nameModeMnMShare: ['Non-Motorized','Non-Motorized','Motorized'      ,'Motorized'             ,'Motorized'              ,'Motorized'],
     nameModeATShare: [''             ,''             ,'Auto'           ,'Auto'                  ,'Auto'                   ,'Transit'  ],
     nameModeDAShare: [''             ,''             ,'Drive Alone'    ,'Shared Ride'            ,'Shared Ride'             ,''         ],
     nameMode23Share: [''             ,''             ,''               ,'Shared Ride 2 Occupants','Shared Ride 3+ Occupants',''         ]
})

# conversion table from mode choice shares output
# colTripCategory is first column in tdm csv outputs trimmed of white space
# Some TripCategories are not included for subtotals, etc
dfTdmCatToModes = pd.DataFrame(data={
    colTripCategory: ['2) Non-Motorized','4) Auto 1 pers' ,'4) Auto 2 pers'        ,'4) Auto 3+pers'           ,'3) Transit','LCL Walk' ,'LCL Drive','COR Walk','COR Drive','BRT Walk','BRT Drive','EXP Walk'  ,'EXP Drive'  ,'LRT Walk','LRT Drive','CRT Walk','CRT Drive'],
         codeHHSMode: ['bike/walk'       ,'auto_sov'       ,'auto_occ2'             ,'auto_occ3p'               ,'transit'   ,''         ,''         ,''        ,''         ,''        ,''         ,''          ,''           ,''        ,''         ,''        ,''         ],
    nameModeMnMShare: ['Non-Motorized'   ,'Motorized'      ,'Motorized'             ,'Motorized'                ,'Motorized' ,''         ,''         ,''        ,''         ,''        ,''         ,''          ,''           ,''        ,''         ,''        ,''         ],
     nameModeDAShare: [''                ,'Drive Alone'    ,'Shared Ride'            ,'Shared Ride'             ,''          ,''         ,''         ,''        ,''         ,''        ,''         ,''          ,''           ,''        ,''         ,''        ,''         ],
     nameMode23Share: [''                ,''               ,'Shared Ride 2 Occupants','Shared Ride 3+ Occupants',''          ,''         ,''         ,''        ,''         ,''        ,''         ,''          ,''           ,''        ,''         ,''        ,''         ],
     nameModeATShare: [''                ,'Auto'           ,'Auto'                  ,'Auto'                     ,'Transit'   ,''         ,''         ,''        ,''         ,''        ,''         ,''          ,''           ,''        ,''         ,''        ,''         ],
     nameModeTransit: [''                ,''               ,''                      ,''                         ,''          ,'Local Bus','Local Bus','Core Bus','Core Bus','BRT'     ,'BRT'      ,'Express Bus','Express Bus','LRT'     ,'LRT'      ,'CRT'     ,'CRT'      ],
      nameModeAccess: [''                ,''               ,''                      ,''                         ,''          ,'Walk'     ,'Drive'    ,'Walk'    ,'Drive'   ,'Walk'    ,'Drive'    ,'Walk'       ,'Drive'      ,'Walk'    ,'Drive'    ,'Walk'    ,'Drive'    ]
})
```

```{python}
# READ IN LATEST ON-BOARD SURVEY DATA AND PREPARE MODE SUMMARY COLUMNS

# read in latest transit on-board survey data
dfObs = pd.read_csv(fnObs,low_memory=False)

# make sure to use the same filter for this data set that is used in spreadsheet pivot tables
dfObs = dfObs[dfObs.Use == 1]

# rename transit modes from obs to tdm
dfObs[colModeTrObs] = dfObs[colModeTrObs].map(dfTransitRename.set_index(colModeTrObs)[labelModeTransit])

# create dataset with only desired columns
dfObs   = dfObs[[colIdObs ,colVOwnObs,colPurpObs,colModeAcObs  ,colModeTrObs   ,colModeBoardObs,colPeriodObs,colTripsObs ,colBoardObs]]
dfObs.columns = (nameIdObs,nameVOwn  ,namePurp  ,nameModeAccess,nameModeTransit,nameModeBoard  ,namePeriod  ,nameTripsObs,nameBoardObs)

# convert vehown to string
dfObs[nameVOwn]= dfObs[nameVOwn].astype(str)

# change all HBC trips to peak period to match model
dfObs.loc[(dfObs[namePurp]=='HBC'), namePeriod] = 'PK'

# create dataframe by Period (Pr), Purpose (Pr), Transit Mode (Tr), Access Mode (Ac)
dfObsPrPuTrAc = dfObs.groupby([namePeriod,namePurp,nameModeTransit,nameModeAccess], as_index=False).agg({nameTripsObs: [np.sum]})
dfObsPrPuTrAc.columns = dfObsPrPuTrAc.columns.droplevel(1)
dfObsPrPuTrAc = dfObsPrPuTrAc.rename(columns={nameTripsObs: nameTripsObs})

# these are all blank for the Obs because Obs transit categories are only applicable inside the transit nest itself
dfObsPrPuTrAc[nameModeMnMShare] = ''
dfObsPrPuTrAc[nameModeATShare ] = ''
dfObsPrPuTrAc[nameModeDAShare ] = ''
dfObsPrPuTrAc[nameMode23Share ] = ''

#display(dfObsPrPuTrAc)
```

```{python}
# PREP HOUSEHOLD TRAVEL SURVEY DATA FOR AGGREGATION

# read in household travel survey trip data
dfHhs  = pd.read_csv(fnHhs,low_memory=False)

# only for internal-to-internal trips
dfHhs = dfHhs[dfHhs.WF_IXXI_MS == 'II']

# remove any records where main mode is other
dfHhs = dfHhs[dfHhs.main_mode_w_auto_occ_text != 'other']

# create dataset with only desired columns
dfHhs =   dfHhs[[colIDHHS ,colPeriodHHS,colPurpHHS,colVOwnHHS,colModeHHS ,colTripsHHS ]]
dfHhs.columns = (nameIDHHS,namePeriod  ,namePurp  ,nameVOwn  ,codeHHSMode,nameTripsHHS)

# convert data
dfHhs[namePeriod]= dfHhs[namePeriod].astype(str)
dfHhs[nameVOwn  ]= dfHhs[nameVOwn  ].astype(str)

# combine Trip Purpose categories to 5 only
dfHhs.loc[(dfHhs[namePurp] == "HBShp") | (dfHhs[namePurp] == "HBO"  ) | (dfHhs[namePurp] == "HBPb"), namePurp] = "HBO"
dfHhs.loc[(dfHhs[namePurp] == "NHBW" ) | (dfHhs[namePurp] == "NHBNW")                              , namePurp] = "NHB"

# change period to PK/OK to be able to match to TDM
dfHhs.loc[(dfHhs[namePeriod] == "1") | (dfHhs[namePeriod] == "3"), namePeriod] = "PK"
dfHhs.loc[(dfHhs[namePeriod] == "2") | (dfHhs[namePeriod] == "4"), namePeriod] = "OK"

# change all HBC trips to peak period to match model
dfHhs.loc[(dfHhs[namePurp]=='HBC'), namePeriod] = 'PK'

dfHhs = pd.DataFrame.merge(dfHhs, dfHhsModes, on=codeHHSMode, how="left")
#display(dfHhs)
```

```{python}
# create dataframe by Period (Pr), Purpose (Pr), Transit Mode (Tr), Access Mode (Ac)
dfHhsPrPuTrAc = dfHhs.groupby([namePeriod,namePurp,nameModeMnMShare,nameModeDAShare,nameMode23Share,nameModeATShare], as_index=False).agg({nameTripsHHS: [np.sum]})
dfHhsPrPuTrAc.columns = dfHhsPrPuTrAc.columns.droplevel(1)
dfHhsPrPuTrAc = dfHhsPrPuTrAc.rename(columns={nameTripsHHS: nameTripsObs})

# these are blank because HHS data is never used for transit mode or access mode breakdown
dfHhsPrPuTrAc[nameModeTransit] = ''
dfHhsPrPuTrAc[nameModeAccess ] = ''
#display(dfHhsPrPuTrAc)
```

```{python}
# merge obs and hhs
dfObservedPrPuTrAc = pd.concat([dfObsPrPuTrAc, dfHhsPrPuTrAc])
#display(dfObservedPrPuTrAc)
#display(dfObservedPrPuTrAc.isnull().values.any())
```

```{python}

# read in shares reports from TDM
dfTdmPk  = pd.read_csv(fnTdmPk)
dfTdmOk  = pd.read_csv(fnTdmOk)

dfTdmPk[namePeriod] = 'PK'
dfTdmOk[namePeriod] = 'OK'
dfTdmBase = pd.concat([dfTdmPk,dfTdmOk])
dfTdmBase = dfTdmBase[[namePeriod,colTripCategory,'HBCtrip','HBOtrip','HBWtrip','NHBtrip']]

dfTdm = pd.melt(dfTdmBase, id_vars=[namePeriod,colTripCategory], value_vars=['HBCtrip','HBOtrip','HBWtrip','NHBtrip'])
dfTdm.columns = (namePeriod,colTripCategory,namePurp,'Trips_TDM')

dfTdm = dfTdm[dfTdm[colTripCategory].str.contains('Drive|Walk|Non-Motorized|pers|Transit')]
dfTdm = dfTdm[dfTdm[colTripCategory].str.contains('Drive Self') == False]
dfTdm[namePurp] = dfTdm[namePurp].str.replace('trip','')

# trim white space
dfTdm = dfTdm.apply(lambda x: x.str.strip() if x.dtype == "object" else x)

# convert column to int
dfTdm[nameTripsTDM]= dfTdm[nameTripsTDM].astype(int)

#display(dfTdm)

# rename transit modes from obs to tdm

# create dataframe by Period (Pr), Purpose (Pr), Transit Mode (Tr), Access Mode (Ac) 
# inner join used because not all rows should be part of final dataframe, eg subtotals
dfTdmToModes = pd.DataFrame.merge(dfTdm, dfTdmCatToModes, on=colTripCategory, how="inner")
dfTdmToModes = dfTdmToModes.drop(columns=colTripCategory)
dfTdmPrPuTrAc = dfTdmToModes.copy()
dfTdmPrPuTrAc = dfTdmPrPuTrAc.rename(columns={nameTripsTDM: nameTripsMod})

#display(dfTdmPrPuTrAc)
```

```{python}
dfComp = pd.DataFrame.merge(dfTdmPrPuTrAc,dfObservedPrPuTrAc,on=(namePeriod,namePurp,nameModeTransit,nameModeAccess,nameModeMnMShare,nameModeDAShare,nameMode23Share,nameModeATShare),how="outer")
#pd.set_option('display.max_rows', 10)
#display(dfComp)
```

```{python}
def filter_columns(data, column, columns):
    cols = columns + [column]
    filtered_data = data[cols].dropna().replace('', pd.NA).dropna()
    # aggregate since some records have more mode breakdowns, hardcoding of aggegregate colums... FIX LATER
    filtered_data_aggregated =  (filtered_data.groupby([column,namePeriod,namePurp],as_index=False)
                                .agg(TripsModel=(nameTripsMod,'sum'),TripsObserved=(nameTripsObs,'sum')))
    return filtered_data_aggregated
def get_dy(data,column):
    dy_data = data.groupby([namePurp,column]).sum().reset_index()
    dy_data[namePeriod] = 'DY'
    return pd.concat([data,dy_data])
def get_all(data,column):
    all_data = data.groupby([namePeriod,column]).sum().reset_index()
    all_data[namePurp] = 'All'
    return pd.concat([data,all_data])
def get_table(data, column, columns):
    filtered = filter_columns(data, column, columns)
    dfDy = get_dy(filtered, column)
    dfAll = get_all(dfDy, column)
    dfAll[nameGroup] = str(column)
    dfAll = dfAll.rename(columns={column: nameMode})

    dfP = dfAll.groupby([namePeriod, namePurp]).sum().reset_index()
    dfP = dfP.rename(columns={nameTripsMod:nameTripsMod+'Total',nameTripsObs:nameTripsObs+'Total'})
    dfP = pd.merge(dfAll,dfP, how='left', on=[namePeriod,namePurp])
    dfP[nameTripsMod+'P'] = dfP[nameTripsMod] / dfP[nameTripsMod+'Total']
    dfP[nameTripsObs+'P'] = dfP[nameTripsObs] / dfP[nameTripsObs+'Total']

    return dfP[[namePeriod,namePurp,nameGroup,nameMode,nameTripsMod+'P',nameTripsObs+'P']]
```

```{python}
dfCompList = [namePeriod,namePurp,nameTripsMod,nameTripsObs]
dfC_Motorized   = get_table(dfComp, nameModeMnMShare, dfCompList)
dfC_AutoTransit = get_table(dfComp, nameModeATShare , dfCompList)
dfC_DaShr       = get_table(dfComp, nameModeDAShare , dfCompList)
dfC_Shr         = get_table(dfComp, nameMode23Share , dfCompList)
dfC_Transit     = get_table(dfComp, nameModeTransit , dfCompList)
dfC_Access      = get_table(dfComp, nameModeAccess  , dfCompList)
dfC_Long        = pd.concat([dfC_Motorized, dfC_AutoTransit, dfC_DaShr, dfC_Shr, dfC_Transit, dfC_Access]).reset_index().drop(columns={'index'})
```

```{python}
dfC_Long_P = dfC_Long.rename(columns={nameTripsMod+'P':'Model',nameTripsObs+'P':'Observed'})
dfC_Long_P = pd.melt(dfC_Long_P, 
                     id_vars = [namePeriod, namePurp, nameGroup, nameMode], 
                     value_vars = ['Model','Observed'], 
                     var_name = 'DataSource',
                     value_name = 'Percent')
#display(dfC_Long_P)
```

```{python}
ojs_define(dataLong = dfC_Long_P)

ojs_define(nameModeMnMShare = nameModeMnMShare)
ojs_define(nameModeATShare  = nameModeATShare )
ojs_define(nameModeDAShare  = nameModeDAShare )
ojs_define(nameMode23Share  = nameMode23Share )
ojs_define(nameModeTransit  = nameModeTransit )
ojs_define(nameModeAccess   = nameModeAccess  )
ojs_define(namePeriod       = namePeriod      )
ojs_define(nameGroup        = nameGroup       )

#dfC_Long.to_csv('data/4-modechoice/dfC_Long.csv')
#dataLong2 = FileAttachment("data\\4-modechoice\\dfC_Long.csv").csv({ typed: true });
#| echo: false
#Inputs.table(filtered_data, {
#  style: {
#    fontSize: 16,
#  },
#  columns: [
#    "Period",
#    "TripPurpose",
#    "Grouping",
#    "Mode",
#    "DataSource",
#    "Percent"
#  ],
#  header: {
#    Period: "Period",
#    TripPurpose:"Trip Purpose",
#    Grouping: "Grouping",
#    Mode: "Mode",
#    DataSource: "Data Source",
#    Percent: "Percent"
#  }})
```

## Mode Share

Mode Share validation is shown through the comparison of model and observed for groups of mode, time period, and trip purpose. The interactive  @fig-mode-share allows for selecting of different combinations to visualize the comparisons. The observed data comes from a combination of the Household Travel Survey and the 2019 Transit On-Board Survey.

The motorized/non-motorized model shares are within 0.1% of the observed data for all time periods and all trip purposes and with 0.5% for any combination of time period and purpose. The auto/transit model shares are within 0.5% of the observed data for all time periods and all trip purposes. The model's transit mode shares are also close to observed with all modes for all time periods and trip purposes with 5%.

```{ojs}
viewof plotSelect    = Inputs.select(new Map([[nameModeMnMShare,nameModeMnMShare],
                                              [nameModeATShare ,nameModeATShare ],
                                              [nameModeDAShare ,nameModeDAShare ],
                                              [nameMode23Share ,nameMode23Share ],
                                              [nameModeTransit ,nameModeTransit ],
                                              [nameModeAccess  ,nameModeAccess  ]
                                             ]), {value: nameGroup, label: "Mode Group:"})
viewof periodSelect  = Inputs.select(new Map([['Daily', 'DY'], ['Peak', 'PK'], ['Off-Peak', 'OK']]), {value: namePeriod, label: "Time Period:"});
viewof purposeSelect = Inputs.select(new Map([['All Purposes', 'All'], ['Home-Based Work', 'HBW'], ['Home-Based College', 'HBC'], ['Home-Based Other', 'HBO'], ['Non-Home Based', 'NHB']]), {value: 'TripPurpose', label: "Trip Purpose:"});
```


```{ojs}
dataLT = transpose(dataLong)
filtered_data = dataLT.filter(function(dataL) {
    return plotSelect == dataL.Group &&
           periodSelect == dataL.Period &&
           purposeSelect == dataL.TripPurpose;
})
```


```{ojs}
import {GroupedBarChart} from "@d3/grouped-bar-chart"
import {Legend, Swatches} from "@d3/color-legend"
import {howto, altplot} from "@d3/example-components"
```


::: {.panel-tabset}

### Plot
```{ojs}
//https://observablehq.com/@d3/grouped-bar-chart
key = Legend(chart.scales.color, {title: "Data Source"})
```

```{ojs}
xDomain = {
    switch(plotSelect) {  // assuming all data points have the same Mode
        case nameModeMnMShare:
            return ['Motorized', 'Non-Motorized'];
            break;
        case nameModeATShare:
            return ['Auto', 'Transit'];
            break;
        case nameModeDAShare:
            return ['Drive Alone', 'Shared Ride'];
            break;
        case nameMode23Share:
            return ['Shared Ride 2 Occupants', 'Shared Ride 3+ Occupants'];
            break;
        case nameModeTransit:
            return ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'];
            break;
        case nameModeAccess:
            return ['Walk', 'Drive'];
            break;
        default:
            return [];  // or set some sensible default
    }
}


```

```{ojs}
//|label: fig-mode-share
//|fig-cap: "Mode share between model and observed by mode, period, and purpose"
chart = GroupedBarChart(filtered_data, {
    x: d => d.Mode,
    y: d => d.Percent,
    z: d => d.DataSource,
    xDomain: xDomain,
    yLabel: "Percent",
    yDomain: [0,1],
    zDomain: ['Model','Observed'],
    width,
    height: 500,
    colors: ["#376092", "#77933c"]
})
```


### Table
```{ojs}
sort_Mode_Source_data = filtered_data.sort((a, b) => {
  // sort by Mode first
  const modeCompare = a.Mode.localeCompare(b.Mode);
  if (modeCompare !== 0) return modeCompare;
  
  // if Mode is the same, sort by DataSource
  return a.DataSource.localeCompare(b.DataSource);
});

Inputs.table(sort_Mode_Source_data, {
  style: {
    fontSize: 16,
  },
  columns: [
    "Mode",
    "DataSource",
    "Percent"
  ],
  header: {
    Mode: "Mode",
    DataSource: "Data Source",
    Percent: "Percent"
  }})
```

:::

## Trips and Boardings

```{python}
dfModeTDM = pd.DataFrame({
     'MODE_TDM':    [4          ,5         ,6            ,7           ,8              ,9    ],
     'codeObsMode': ['LCL'      ,'COR'     ,'EXP'        ,'LRT'       ,'CRT'          ,'BRT'],
     'MODENAME'   : ['Local Bus','Core Bus','Express Bus','Light Rail','Commuter Rail','BRT']
})
```

```{python}

dbf_TDM_PARoute=pd.DataFrame(DBF(fnTdmPaRoute, load=True))
dbf_TDM_PARoute

dbf_TDM_PARoute_LinkModebyBoardMode = pd.melt(dbf_TDM_PARoute, id_vars=['MODE','NAMEID','NAME'], value_vars=['DY_4_XITB','DY_5_XITB','DY_6_XITB','DY_7_XITB','DY_8_XITB','DY_9_XITB'])
dbf_TDM_PARoute_LinkModebyBoardMode[nameModeTransit+'_modeTDM'] = pd.to_numeric(dbf_TDM_PARoute_LinkModebyBoardMode['variable'].str.get(3))
```

```{python}
# TDM Boardings - BoardMode
dfTdm_Boardings = dbf_TDM_PARoute_LinkModebyBoardMode.groupby(['MODE',nameModeTransit+'_modeTDM'],as_index=False).agg({'value': [np.sum]})
dfTdm_Boardings.columns = ([nameModeBoard+'_modeTDM',nameModeTransit+'_modeTDM',nameBoardTDM])

dfTdm_Boardings = pd.DataFrame.merge(dfModeTDM, dfTdm_Boardings, left_on='MODE_TDM', right_on=nameModeBoard+'_modeTDM')
dfTdm_Boardings = dfTdm_Boardings.drop(columns=['MODE_TDM',nameModeBoard+'_modeTDM'])
dfTdm_Boardings = dfTdm_Boardings.rename(columns={'codeObsMode':nameModeBoard})

dfTdm_Boardings = pd.DataFrame.merge(dfModeTDM, dfTdm_Boardings, left_on='MODE_TDM', right_on=nameModeTransit+'_modeTDM')
dfTdm_Boardings = dfTdm_Boardings.drop(columns=['MODE_TDM',nameModeTransit+'_modeTDM'])
dfTdm_Boardings = dfTdm_Boardings.rename(columns={'codeObsMode':nameModeTransit})

dfTdm_Boardings_BoardMode = dfTdm_Boardings.groupby([nameModeBoard], as_index=False).agg({nameBoardTDM: [np.sum]})
dfTdm_Boardings_BoardMode.columns = dfTdm_Boardings_BoardMode.columns.droplevel(1)

# TDM Boardings - TransitMode
dfTdm_Boardings_TransitMode = dfTdm_Boardings.groupby([nameModeTransit], as_index=False).agg({nameBoardTDM: [np.sum]})
dfTdm_Boardings_TransitMode.columns = dfTdm_Boardings_TransitMode.columns.droplevel(1)

# Trips TDM
dfTdm_Trips = dfTdmToModes.groupby(nameModeTransit, as_index=False).agg({nameTripsTDM: [np.sum]})
dfTdm_Trips = dfTdm_Trips[dfTdm_Trips[nameModeTransit] != '']
dfTdm_Trips.columns = dfTdm_Trips.columns.droplevel(1)

#Obs Trips
dfObs_Boardings_Trips = dfObs.groupby(nameModeTransit, as_index=False).agg({nameBoardObs: [np.sum], nameTripsObs: [np.sum]})
dfObs_Boardings_Trips.columns = dfObs_Boardings_Trips.columns.droplevel(1)

# Obs Boardings
dfObs_Boardings_BoardMode = dfObs.groupby(nameModeBoard, as_index=False).agg({nameBoardObs: [np.sum]})
dfObs_Boardings_BoardMode.columns = dfObs_Boardings_BoardMode.columns.droplevel(1)
```


```{python}
# TDM v Obs Trip Comparison
dfTrips = pd.DataFrame.merge(dfTdm_Trips, dfObs_Boardings_Trips[[nameModeTransit,nameTripsObs]], on=nameModeTransit, how='outer')
dfTrips.columns = (nameModeTransit, nameTripsMod, nameTripsObs)
dfTrips = dfTrips.set_index(nameModeTransit)

#add total row
dfTrips = dfTrips.append(dfTrips.sum(numeric_only=True).rename('Total'))

#calculate difference
dfTrips['Diff'] = dfTrips[nameTripsMod] - dfTrips[nameTripsObs]
dfTrips['% Diff'] = dfTrips['Diff'] / dfTrips[nameTripsObs]
```

```{python}
# Boardings by Linked Trips 
dfBoardings_LinkedTrip = pd.DataFrame.merge(dfTdm_Boardings_TransitMode, dfObs_Boardings_Trips[[nameModeTransit,nameBoardObs]], on=nameModeTransit, how='outer')
dfBoardings_LinkedTrip.columns = (nameModeTransit, nameBoardMod, nameBoardObs)

dfBoardings_LinkedTrip = dfBoardings_LinkedTrip.set_index(nameModeTransit)

#add total row
dfBoardings_LinkedTrip = dfBoardings_LinkedTrip.append(dfBoardings_LinkedTrip.sum(numeric_only=True).rename('Total'))

#calculate difference
dfBoardings_LinkedTrip['Diff'] = dfBoardings_LinkedTrip[nameBoardMod] - dfBoardings_LinkedTrip[nameBoardObs]
dfBoardings_LinkedTrip['% Diff'] = dfBoardings_LinkedTrip['Diff'] / dfBoardings_LinkedTrip[nameBoardObs]
```

```{python}
# Transfer Ratio
dfTxRatio = pd.DataFrame.merge(dfTrips[[nameTripsMod, nameTripsObs]], dfBoardings_LinkedTrip[[nameBoardMod, nameBoardObs]], on=nameModeTransit, how='outer')

#calculate transfer ratio
dfTxRatio[nameTxRatioMod] = dfTxRatio[nameBoardMod] / dfTxRatio[nameTripsMod]
dfTxRatio[nameTxRatioObs] = dfTxRatio[nameBoardObs] / dfTxRatio[nameTripsObs]

#calculate difference
dfTxRatio['Diff'] = dfTxRatio[nameTxRatioMod] - dfTxRatio[nameTxRatioObs]
dfTxRatio['% Diff'] = dfTxRatio['Diff'] / dfTxRatio[nameTxRatioObs]

dfTxRatio = dfTxRatio[[nameTxRatioMod, nameTxRatioObs, 'Diff', '% Diff']]
```

```{python}
# Boardings by Mode Surveyed
dfBoardings_ModeSurveyed = pd.DataFrame.merge(dfTdm_Boardings_BoardMode, dfObs_Boardings_BoardMode[[nameModeBoard,nameBoardObs]], on=nameModeBoard, how='outer')
dfBoardings_ModeSurveyed.columns = (nameModeBoard, nameBoardMod, nameBoardObs)

dfBoardings_ModeSurveyed = dfBoardings_ModeSurveyed.set_index(nameModeBoard)

#add total row
dfBoardings_ModeSurveyed = dfBoardings_ModeSurveyed.append(dfBoardings_ModeSurveyed.sum(numeric_only=True).rename('Total'))

#calculate difference
dfBoardings_ModeSurveyed['Diff'] = dfBoardings_ModeSurveyed[nameBoardMod] - dfBoardings_ModeSurveyed[nameBoardObs]
dfBoardings_ModeSurveyed['% Diff'] = dfBoardings_ModeSurveyed['Diff'] / dfBoardings_ModeSurveyed[nameBoardObs]
```

```{python}
df1_Trips = (dfTrips
    .reset_index()
    .rename(columns={'Transit Mode': 'Mode', nameTripsMod:'Model', nameTripsObs:'Observed', '% Diff': 'PercentDiff'}))
df1_Trips['Title'] = 'Trips'
df1_Trips_Melt = pd.melt(df1_Trips, 
                         id_vars =['Mode', 'Diff', 'PercentDiff','Title'],
                         value_vars = ['Model', 'Observed'],
                         var_name = 'DataSource',
                         value_name = 'Value')

df1_Boardings_LinkedTrip = (dfBoardings_LinkedTrip
    .reset_index()
    .rename(columns={'Transit Mode': 'Mode', nameBoardMod:'Model', nameBoardObs:'Observed', '% Diff': 'PercentDiff'}))
df1_Boardings_LinkedTrip['Title'] = 'Boardings by Linked Trip'
df1_Boardings_LinkedTrips_Melt = pd.melt(df1_Boardings_LinkedTrip, 
                         id_vars =['Mode', 'Diff', 'PercentDiff','Title'],
                         value_vars = ['Model', 'Observed'],
                         var_name = 'DataSource',
                         value_name = 'Value')

df1_TxRatio = (dfTxRatio
    .reset_index()
    .rename(columns={'Transit Mode': 'Mode', nameTxRatioMod:'Model', nameTxRatioObs:'Observed', '% Diff': 'PercentDiff'}))
df1_TxRatio['Title'] = 'Transfer Ratio'
df1_TxRatio_Melt = pd.melt(df1_TxRatio, 
                         id_vars =['Mode', 'Diff', 'PercentDiff','Title'],
                         value_vars = ['Model', 'Observed'],
                         var_name = 'DataSource',
                         value_name = 'Value')

df1_Boardings_ModeSurveyed = (dfBoardings_ModeSurveyed
    .reset_index()
    .rename(columns={'Transit Mode - Surveyed': 'Mode', nameBoardMod:'Model', nameBoardObs:'Observed', '% Diff': 'PercentDiff'}))
df1_Boardings_ModeSurveyed['Title'] = 'Boardings by Mode Surveyed'
df1_Boardings_ModeSurveyed_Melt = pd.melt(df1_Boardings_ModeSurveyed, 
                         id_vars =['Mode', 'Diff', 'PercentDiff','Title'],
                         value_vars = ['Model', 'Observed'],
                         var_name = 'DataSource',
                         value_name = 'Value')
```

```{python}
dfboardings_obj = pd.concat([df1_Trips_Melt, df1_Boardings_LinkedTrips_Melt, df1_TxRatio_Melt, df1_Boardings_ModeSurveyed_Melt])

dfboardings_obj_longer = pd.melt(dfboardings_obj,
                                  id_vars =['Mode', 'DataSource','Title'],
                                  value_vars = ['Value', 'Diff', 'PercentDiff'],
                                  var_name = 'View',
                                  value_name = 'ViewValue')             
```

```{python}
ojs_define(boardLong = dfboardings_obj_longer)
```

The following figure provides and interactive view to understand the transit boarding trips, linked trips, transfer ratios, and mode surveyed between modeled and observed data. 

```{ojs}
viewof bPlotSelect = Inputs.select(new Map([['Trips', 'Trips'], ['Boardings by Linked Trip', 'Boardings by Linked Trip'], ['Transfer Ratio','Transfer Ratio'], ['Boardings by Mode Surveyed','Boardings by Mode Surveyed']]), {value: nameGroup, label: "Plot Type"})
```

```{ojs}
dataBLT = transpose(boardLong)
filtered_bData = dataBLT.filter(function(dataL) {
    return bPlotSelect == dataL.Title &&
           "Value" == dataL.View;
})
```

::: {.panel-tabset}

### Plot
```{ojs}
key2 = Legend(chart2.scales.color, {title: "Data Source"})
```

```{ojs}
//|label: fig-mc-brdings
//|fig-cap: Transit boardings by trip, linked trip, transfer ratio, and mode surveyed.
chart2 = GroupedBarChart(filtered_bData, {
    x: d => d.Mode,
    y: d => d.ViewValue,
    z: d => d.DataSource,
    yLabel: "Value",
    zDomain: ['Model','Observed'],
    width,
    height: 500,
    colors: ["#376092", "#77933c"]
})
```


### Table
```{ojs}
//| echo: false

sort_Mode_Source_bData = filtered_bData.sort((a, b) => {
  // sort by Mode first
  const modeCompare = a.Mode.localeCompare(b.Mode);
  if (modeCompare !== 0) return modeCompare;
  
  // if Mode is the same, sort by DataSource
  return a.DataSource.localeCompare(b.DataSource);
});

Inputs.table(sort_Mode_Source_bData, {
  style: {
    fontSize: 16,
  },
  columns: [
    "Mode",
    "DataSource",
    "ViewValue"
  ],
  header: {
    Mode: "Grouping",
    DataSource: "Data Source",
    ViewValue: "Percent"
  }})
```

:::


```{ojs}
viewof bPlotSelect2 = Inputs.select(new Map([['Trips', 'Trips'], ['Boardings by Linked Trip', 'Boardings by Linked Trip'], ['Transfer Ratio','Transfer Ratio'], ['Boardings by Mode Surveyed','Boardings by Mode Surveyed']]), {value: nameGroup, label: "Plot Type"})
```

```{ojs}
viewof metric = Inputs.radio(new Map([["Absolute", "Diff"], ["Relative", "PercentDiff"]]), {value: "View", label: "Change"})
```

```{ojs}
filtered_bData2 = dataBLT.filter(function(dataL) {
    return bPlotSelect2 == dataL.Title  &&
           metric == dataL.View;
})
```

::: {.panel-tabset}
### Plot
```{ojs}
//https://observablehq.com/@d3/diverging-bar-chart
import {DivergingBarChart} from "@d3/diverging-bar-chart"
```

```{ojs}
//|label: fig-mc-tr-brdings
//|fig-cap: Transit boardings -- absolute and relative difference between model and observed.
chart3 = DivergingBarChart(filtered_bData2, {
    x: d => d.ViewValue,
    y: d => d.Mode,
    xFormat: metric === "Diff" ? "+,d" : "+%",
    width,
    height: 500,
    colors: d3.schemeRdBu[3]
})
```

### Table
```{ojs}
//| echo: false
Inputs.table(filtered_bData2)
```

:::

:::

::: {.content-hidden when-format="html"}
## Boardings
@fig-pdf-boardings show validation charts to understadn the transit boardings, linked trips, transfer ratios, and mode surveyed between modeled and observed. 

![Mode Choice boardings.](_pictures/6-plot1.png){#fig-pdf-boardings}

::: {.content-hidden when-format="html"}
## Mode Share
@fig-pdf-trips-dy, @fig-pdf-trips-pk, and @fig-pdf-trips-ok show validation charts by modes, periods, and purposes.

![Total Trips - Daily.](_pictures/6-plot2.png){#fig-pdf-trips-dy}

![Total Trips - Daily.](_pictures/6-plot2.png){#fig-pdf-trips-pk}

![Total Trips - Daily.](_pictures/6-plot4.png){#fig-pdf-trips-ok}

:::
