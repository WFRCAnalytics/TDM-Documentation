---
title: Highway & Transit Networks Updates
warning: false
message: false
echo: false
---

## Highway Network

### Highway Network Project Coding

The highway network in version 9 was updated to reflect the 2023-2050 RTP and the 2023-2028 TIP.  The updated projects were coded into a set of fields in the Master highway network using the same field naming convention[^1]  as version 8, but field names were updated to reflect the new 2023 RTP:

[^1]: Field names are composed of a prefix and a suffix. The prefix indicates the type of the network attribute (e.g. lane, functional type, etc.). The suffix identifies the scenarios coded into the network. If the scenario is part of a plan phase year, a 2-digit plan-opening-year is included in the suffix name. All field names are limited to 10 characters in length.

**Attribute Type Identifying Prefix**

 - *Link*
    - **LN** – lane
    - **FT** – functional type
    - **TSPD** – transit speed (coded on rail links and transit only links)
    - **HOT** – marker on general purpose lane indicating presence of adjacent HOV/HOT lane
    - **REL** – marker to identify reliability lane project (e.g. managed lanes on arterials or reversible freeway lanes, etc.)
    - **OP** – marker to identify operational project (i.e. enhancements to improve the operations of a roadway without adding physical capacity, such as signal timing optimization, access management, ramp metering etc.)
    - **GIS** – contains ID or key to link to GIS mapping and project information (currently only includes the '23_32', '23_42', and '23_50' scenarios)
 - *Node*
    - **PNR** – park-and-ride
    - **FARZN** – commuter rail fare zone 

**Scenario Identifying Suffix**

 - _2015
 - _2019 – model base year
 - _2023 – RTP opening year
 - _2028 – end of 2023-2028 TIP
 - 23_32 – 2023 RTP end-of-phase 1 (2032), fiscally-constrained
 - 23_42 – 2023 RTP end-of-phase 2 (2042), fiscally-constrained
 - 23_50 – 2023 RTP end-of-phase 3 (2050), fiscally-constrained
 - 23_32UF – 2023 RTP end-of-phase 1 (2032), unfunded need
 - 23_42UF – 2023 RTP end-of-phase 2 (2042), unfunded need
 - 23_50UF – 2023 RTP end-of-phase 3 (2050), unfunded need
 - 23_50UFM - 2023 RTP end-of-phase 3 (2050), unfunded need MAG alternate (includes different assumption related to Lehi freeway project at the Point of the Mountain), currently only includes “LN” attribute
 - Note, TSPD unfunded need scenario fields use “U” instead of “UF” due to the 10-character field width limitation.

Changes to the number of lanes in version 9 can be seen in @fig-phase1, @fig-phase2, and @fig-phase3.

::: {.panel-tabset}

### Phase 1

::: {#fig-phase1 layout-ncol=3}
![](data\map_pngs\comparisons/white-box.png)

![](data\map_pngs\comparisons/RTP_2032_2030_Lane_MAP.png)

![](data\map_pngs\comparisons/LEGEND.png)

Changes to Highway Project List (Phase 1)
:::

### Phase 2

::: {#fig-phase2 layout-ncol=3}

![](data\map_pngs\comparisons/white-box.png)

![](data\map_pngs\comparisons/RTP_2042_2040_Lane_MAP.png)

![](data\map_pngs\comparisons/LEGEND.png)

Changes to Highway Project List (Phase 2)
:::

### Phase 3

::: {#fig-phase3 layout-ncol=3}

![](data\map_pngs\comparisons/white-box.png)

![](data\map_pngs\comparisons/RTP_2050_Lane_MAP.png)

![](data\map_pngs\comparisons/LEGEND.png)

Changes to Highway Project List (Phase 3)
:::

:::

### Other Changes to Network Field Attributes

In addition, the following edits were made to the highway network:

 - The distance exception fields (DISTEXCEPT) were set to 0. DISTEXCEPT was used in previous model versions at external links to account for the distance from the external to the county boundary for air quality VMT calculations. Since version 9 model boundaries correspond to county boundaries, this field is no longer needed in the model.
 - The “TSP” fields were updated to reflect recent UTA light rail and commuter rail studies.
 - The MAG_LINK/MAG_NODE fields identify links and node in the MAG planning area and are used when snapping together changes to the WFRC and MAG master networks. Version 8 included WFRC_LINK/WFRC_NODE fields to identify links/nodes in the WFRC area. These WFRC fields were redundant and dropped from the master network since the MAG and WFRC areas are mutually exclusive.
 - The commuter rail Fare Zone for the Vineyard and Orem stations was updated to be the same fare zone, similar to the fare zone for the North Temple and Salt Lake Central stations. There is no additional fare cost for traveling between the new Vineyard and Orem stations. 
 - SEGID on the highway links was updated and made consistent with the most recent segment shapefile. SEGID exception fields (SEGEX_RTP, SEGEX_NEED) were also created to account for links with future SEGIDs that differ with existing SEGIDs, primarily for the frontage road system in Salt Lake and Utah counties. These new fields are under development and values for these fields will be forthcoming. 

### Changes to Highway Network Geometry

Version 9 highway network was expanded to incorporate the new model areas (see [Changes to TAZ Geometry and Attributes](https://wfrc.org/wftdm-docs/v9x/v900/whats-new/12-taz.html#changes-to-taz-geometry-and-attributes)). The expansion to these mountainous areas meant the inclusion of many very curvy roadways. The curvature of these roadways is maintained by the link shapefile in the associated `1_Inputs\3_Highway\GIS` folder. Edits made to the link/node geometry in the highway network in these areas should be done with *True Shape* turned on in Cube Base in order to maintain the link/node association with the underlying shapefile. In addition, *True Shape* will be required when exporting the link shapefile or the shape geometry in the mountain areas will be lost.

### Changes to Highway Network Numbering

The version 9 highway network node numbering scheme was updated, as shown in @tbl-master-nodes. 

::: {.grid}
::: {.g-col-2}
:::
::: {.g-col-8}
```{python}
#| label: tbl-master-nodes
#| tbl-cap: New Master Network Node Numbering
import pandas as pd
from tabulate import tabulate
from IPython.display import Markdown

# Define the data
data = [
    ["WFRC", '10,000-19,999', '20,000-49,999', '90,000-94,999'],
    ["MAG" , '50,000-59,999', '60,000-89,999', '95,000-99,999']
]

# Create a pandas DataFrame
df = pd.DataFrame(data, columns=['MPO', 'Transit Nodes', 'Highway Nodes', 'v9 Expansion Area Nodes'])

# Convert the DataFrame to a markdown table
headers = ['MPO', 'Transit Nodes', 'Highway Nodes', 'v9 Expansion Area Nodes']
Markdown(tabulate(df, headers=headers, tablefmt="pipe", colalign=("left",)*len(headers), showindex=False)) 
```
:::
:::

The "HwyNodes" parameter in the `0_GeneralParameters.block` file was updated to reflect the new highway node numbering. 

::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-highway-renumber
#| tbl-cap: Renumbered Master Network Highway Node Range
#| tbl-colwidths: [20, 20, 20, 40]
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'HighwayNodes']
table = table[['Parameter', 'v9Value', 'v8Value','Notes']]
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value'}, inplace=True)
display(table.style.hide_index())  
```
:::
:::

Highway node references in the `PT_Parameter \...FAC` files and the `3_TurnPenalty.s` script were updated to reflect the new TAZ and highway node numbering.
Array indices found in the `5_AssignHwy\05_RemoveManagedLanes.s` script were also updated from <=20,000 to 1,000,000 to account for the new highway network numbering scheme.

### Changes to External Location and Numbering

Details on the location and numbering of the new external nodes on the master highway network are shown in @fig-externals and @tbl-externals. (See [Changes to TAZ Geometry and Attributes](https://wfrc.org/wftdm-docs/v9x/v900/whats-new/12-taz.html#changes-to-taz-geometry-and-attributes) and [Changes to TAZ Parameters](https://wfrc.org/wftdm-docs/v9x/v900/whats-new/12-taz.html#changes-to-taz-parameters) for more information on external zones.)

```{python}
#|echo: false
# get externals mapping layers

import os
import pandas as pd
import geopandas as gpd
import topojson as tp

if not os.path.isfile('data/masternetlink.geojson'):
  gdfMasterNetLink = gpd.read_file(r"A:\1 - TDM\1 - Input Dev\5 - External\_GIS_Layers\Master Net\MasterNet - 2022-07-29_Link.shp")
  gdfMasterNetLink = gdfMasterNetLink.to_crs({'init': 'epsg:4326'}) 
  gdfMasterNetLink = gdfMasterNetLink[gdfMasterNetLink['FT_2019']>1]
  gdfMasterNetLink = gdfMasterNetLink[['LINKID','FLG_NEWNET','geometry']]
  topo = tp.Topology(gdfMasterNetLink, prequantize=False)
  gdfMasterNetLink = topo.toposimplify(.0001).to_gdf()
  gdfMasterNetLink.to_file('data/masternetlink.geojson', driver='GeoJSON')

if not os.path.isfile('data/masternetnode.geojson'):
  gdfMasterNetNode = gpd.read_file(r"A:\1 - TDM\1 - Input Dev\5 - External\_GIS_Layers\Master Net\MasterNet - 2022-07-29_Node.shp")
  gdfMasterNetNode = gdfMasterNetNode.to_crs({'init': 'epsg:4326'}) 
  gdfMasterNetNode = gdfMasterNetNode[['N','EXTERNAL','EXT_V9','geometry']]
  topo = tp.Topology(gdfMasterNetNode, prequantize=False)
  gdfMasterNetNode = topo.toposimplify(.0001).to_gdf()
  gdfMasterNetNode.to_file('data/masternetnode.geojson', driver='GeoJSON')

if not os.path.isfile('data/externalold.geojson'):
  gdfMasterNetNode = gpd.read_file('data/masternetnode.geojson')
  gdfExtNew = gdfMasterNetNode[gdfMasterNetNode['EXTERNAL']==1]
  gdfExtNew.to_file('data/externalold.geojson', driver='GeoJSON')

if not os.path.isfile('data/externalnew.geojson'):
  gdfMasterNetNode = gpd.read_file('data/masternetnode.geojson')
  gdfExtNew = gdfMasterNetNode[gdfMasterNetNode['EXT_V9']==1]
  gdfExtNew.to_file('data/externalnew.geojson', driver='GeoJSON')

```

```{ojs}
//|echo: false
geojsonExternalOld   = FileAttachment("data/externalold.geojson"  ).json()
geojsonExternalNew   = FileAttachment("data/externalnew.geojson"  ).json()
geojsonMasterNetLink = FileAttachment("data/masternetlink.geojson").json()
```

```{ojs}
//|label: fig-externals
//|fig-cap: Location of External Nodes
//|echo: false

mapExternals = {

  let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });
  yield container;
  
  let map = L.map(container).setView([40.7608, -111.8910], 8.25);

  let osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map); 

  var cNew = "#FF0000";
  var cOld = "#00FF00";

  var squareIcon_New = L.icon({
    iconUrl: 'https://wfrc.org/wftdm-docs/_pictures/square_green.png',  // Replace with the path to your square-like icon image
    iconSize: [15, 15],          // Adjust the size of the square-like icon
    iconAnchor: [5, 5],          // Adjust the anchor point if needed
  });

  var squareIcon_Old = L.icon({
    iconUrl: 'https://wfrc.org/wftdm-docs/_pictures/square_red.png',       // Replace with the path to your square-like icon image
    iconSize: [15, 15],          // Adjust the size of the square-like icon
    iconAnchor: [5, 5],          // Adjust the anchor point if needed
  });

  var cCommon = "#FF0000"
  var cAdded  = "#00FF00"
  var cOther  = "#888888"

  var geolineCommon = {
      color: cCommon,
      weight: 2,
      opacity: 1,
  };

  var geoLineAdded = {
      color: cAdded,
      weight: 2,
      opacity: 1,
  };
  var geoLineOther = {
      color: cOther,
      weight: 2,
      opacity: 1,
  };
            
  // function to use different icons based on number of stations
  function markerByNewNet(feature) {
    if (feature.properties.FLG_NEWNET==3) {
      return geolineCommon;
    } else if (feature.properties.FLG_NEWNET==23){
      return geoLineAdded;
    } else{
      return geoLineOther;
    }
  };

  function getColor(c) {
    if        (c=='Common') {
      return cCommon;
    } else if (c=='Added') {
      return cAdded;
    } else if (c=='Other') {
      return cOther;
    }
  };

  //let lyrNetwork = L.geoJson(geojsonMasterNetLink, { weight: 0.75, color: "#888888", fillOpacity: 0}).addTo(map);

  // create the GeoJSON layer and call the styling function with each marker
//  var lyrNetwork = L.geoJson(geojsonMasterNetLink,  { function (markerByNewNet(feature))}).addTo(map);

  // create the GeoJSON layer and call the styling function with each marker
  var externalNewLayer = L.geoJSON(geojsonExternalNew, {
    pointToLayer: function (feature, latlng) {
      var mypopup = L.popup().setContent("<b>Node: " + feature.properties.N + "</b>");
      var mymarker = L.marker(latlng, { icon: squareIcon_New });
      mymarker.bindPopup(mypopup);
      return mymarker;
    }
  }).addTo(map);

  // create the GeoJSON layer and call the styling function with each marker
  var externalOldLayer = L.geoJSON(geojsonExternalOld, {
    pointToLayer: function (feature, latlng) {
      var mypopup = L.popup().setContent("<b>Node: " + feature.properties.N + "</b>");
      var mymarker = L.marker(latlng, { icon: squareIcon_Old });
      mymarker.bindPopup(mypopup);
      return mymarker;
    }
  }).addTo(map);

  var legend = L.control({position: 'bottomleft'});
    legend.onAdd = function (map) {
      var div = L.DomUtil.create('div', 'info legend');
      var labelsBill = []; // legend title
      var lcategories = ['v8.3.2','v9.0.0'];
      var lcolors     = [cOld    ,cNew    ];

      for (var i = 0; i < lcategories.length; i++) {
        div.innerHTML += 
          labelsBill.push(
            '<i style="background:' + lcolors[i] + '">&nbsp;</i> ' +
          (lcategories[i] ? lcategories[i] : '+'));
      }
      div.innerHTML = labelsBill.join('<br>');

      // Add CSS style for the background color
      div.style.backgroundColor = 'lightgray';
      div.style.padding = '10px';
      
      return div;
    };
    legend.addTo(map);  
}
```

::: {.grid}
::: {.g-col-2}
:::
::: {.g-col-8}
```{python}
#| label: tbl-externals
#| tbl-cap: External Number & Description
#| tbl-colwidths: [10,10,10,40,30]
import pandas as pd
import numpy as np
from IPython.display import Markdown
from tabulate import tabulate
table = pd.read_csv('tables/2-externals.csv')
table['v9Value'] = table['v9Value'].astype(str)
table['v8Value'] = table['v8Value'].astype(str)
table = table.replace(np. nan,'',regex=True) 
headers = ['County','v9 Value','v8 Value', 'Location','Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

### Additional Network Changes

Additional highway network updates in version 9 include:

 - A fix for a small network error in Box Elder where a local road was drawn to the centroid of a TAZ
 - A phase change for Managed Motorways in WFRC area
 - Significant updates to centroid connectors in the MAG area 


## Transit Networks

### Changes to Transit Line Files

The transit line files were updated to correspond with the 2023-2050 RTP and the 2023-2028 TIP. Specific changes to these files for each plan year include:

 - **Lin_2019** – files were thoroughly vetted to represent Aug 2019 change day.
 - **Lin_2023** – route alignment, headways and stops were updated to the August 2022 change day.
 - **Lin_2028** – route alignment, headways and stops were updated to the UTA 5-Year Service Plan.
 - **Lin_2032**, Lin_2042, Lin_2050 – changes from 2028 were rolled forward into plan phased years and updated based on 2023 fiscally constrained plan.
 - **Lin_2032_Needs**, **Lin_2042_Needs**, **Lin_2050_Needs** – changes from 2028 were rolled forward into plan phased years and updated based on 2023 unfunded needs plan.
 - **Lin_2032_Needs_MAG**, **Lin_2042_Needs_MAG**, **Lin_2050_Needs_MAG** – these are copies of the “Needs” transit plans and edited to reflect changes in the MAG 2023 unfunded needs plan at the Point of the Mountain.

In addition, route *S902* in Salt Lake County was shortened to exclude the I-80 Parleys Canyon external node and route *LittleCott* which provides access up Little Cottonwood Canyon was added to the model.

### Changes to General Hand-Coded Support Links

The `1_Inputs\4_Transit\General_hand_coded_walk_links.NTL` file was updated to be consistent with the new TAZ structure and to ensure all hand coded walk links are realistic.

### Added `Transit Route Tester` Folder

A `_chk Transit Compile on Net` folder was added in the `1_Inputs\4_Transit` folder. This folder contains a script to check if the transit line files compile on the related scenario highway network from the Master network. The script helps review transit line edits outside of the model stream. Any transit line compiling issues are reported in the `check - 1 – {ScenarioName}.txt` text file created by the script.

## Segment Shapefile

The Wasatch Front segment shapefile (found in `1_Inputs\6_Segment`) was updated to reflect the updated highway and transit networks. These changes include:

 - Segments were adjusted to reflect new highway projects coded on the master highway network. 
 - SEGIDs were added to rail links to allow for easier transit result visualization. 




