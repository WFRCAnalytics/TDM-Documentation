---
title: Model 2019 Base-Year Updates
warning: false
message: false
echo: false
---

The following parameters and inputs were updated to bring the WF TDM base year from 2015 to 2019. 

## Parameters

### Income

Median income parameters for the model were updated using 2019 5-year ACS data and kept in 2019 dollars to reflect 2019 base year. Median income parameters in version 8 were estimated from 2015 ACS data and deflated to 2010 dollars. The regional median income was calculated for each county and for each model space and used to update the following income-related parameters in `0_GeneralParameters.block`. 


::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-hh-disagg
#| tbl-cap: Regional Median Income
import pandas as pd
from IPython.display import Markdown
from tabulate import tabulate

table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'HHDisaggParams']
table = table[['Parameter', 'v9Value', 'v8Value']]
table['v9Value'] = table['v9Value'].astype(int).apply(lambda x: "${:,}".format((x)))
table['v8Value'] = table['v8Value'].astype(int).apply(lambda x: "${:,}".format((x)))
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value'}, inplace=True)
headers = ['Parameter', 'v9 Value', 'v8 Value']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

::: {.grid}
::: {.g-col-2}
:::
::: {.g-col-8}
```{python}
#| label: tbl-exogen-income
#| tbl-cap: Income Break Points for Airport Exogenous Trip Table Generation
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'ExogenousTrips']
table = table[['Parameter', 'v9Value', 'v8Value', 'Notes']]
table['v9Value'] = table['v9Value'].astype(int).apply(lambda x: "${:,}".format((x)))
table['v8Value'] = table['v8Value'].astype(int).apply(lambda x: "${:,}".format((x)))
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value'}, inplace=True)
headers = ['Parameter', 'v9 Value', 'v8 Value', 'Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

The TAZ-level median income was also updated within the socioeconomic input files.

The household disaggregation income lookup curves and seed table were re-estimated based on the 2019 ACS data. The income lookup curves were estimated using data for all of Utah then calibrated specifically for the Wasatch Front model. @fig-lookup shows a comparison of the version 9 and version 8 income lookup curves for the Wasatch Front.

The version 9 calibrated curves show a slight shift in the proportion of households toward the highest income groups from the middle two income groups relative to version 8. The lowest income group was very similar between versions 8 and 9. As the model currently groups the top three income groups into the “high income” category, the impact to the model is minimal.

![Comparison of Wasatch Front Income Lookup Curves](_pictures/lookup-curves.png){#fig-lookup width=80%}

### Value of Time

Value of time parameters were updated using 2019 5-year ACS data. The value of time calculation in version 9 used the same assumptions as version 8 (i.e. 39% of median income for work trips, 30% of median income for personal trips, etc.). The value of time parameters in version 9 are in 2019 dollars. Version 8 parameters were calibrated to 2015 ACS data and deflated to 2010 dollars. Values of time are in cents/minute.

::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-10}
```{python}
#| label: tbl-vot1
#| tbl-cap: Value of Time Rates
#| tbl-colwidths: [24,8,24,8,36]
import pandas as pd
from tabulate import tabulate
from IPython.display import Markdown
import numpy as np

table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'VOT1']
table = table[['v9Parameter','v9Value', 'v8Parameter','v8Value','Notes']]
table = table.replace(np. nan,'',regex=True) 
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value', 'v9Parameter':'v9 Parameter', 'v8Parameter':'v8 Parameter'}, inplace=True)
headers = ['v9 Parameter','v9 Value', 'v8 Parameter','v8 Value','Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

To better understand the relative change in the value of time parameters, the parameters were normalized by the work-trip parameter and the percent difference in the ratios was compared. The percent differences show that the relative change between the variables in versions 8 and version 9 is very similar, indicating there isn’t a strong behavioral change due to the update of this parameter.

::: {.grid}
::: {.g-col-2}
:::
::: {.g-col-8}
```{python}
#| label: tbl-relative-vot-ratios
#| tbl-cap: Relative Value of Time Ratios
# Define the data
data = [
    ['work trips'    ,	'1.00',	'1.00',	'0.0%' ],
    ['non-work trips',  '0.77', '0.78', '-0.6%'],
    ['external'      ,	'0.91',	'0.89',	'2.3%' ],
    ['light truck'   ,	'1.68',	'1.67',	'0.9%' ],
    ['medium truck'  ,	'2.27',	'2.22',	'2.3%' ],
    ['heavy truck'   ,	'2.86',	'2.78',	'3.1%' ]
]

# Create a pandas DataFrame
df = pd.DataFrame(data, columns=['Category', 'v9 Value Relative to Work Trips', 'v8 Value Relative to Work Trips', '% Difference'])

# Convert the DataFrame to a markdown table
headers = ['Category', 'v9 Value Relative to Work Trips', 'v8 Value Relative to Work Trips', '% Difference']
Markdown(tabulate(df, headers=headers, tablefmt="pipe", colalign=("left",)*len(headers), showindex=False)) 
```
:::
:::

### Auto Operating Costs

Auto operating costs were updated to reflect 2019 fuel cost, average fuel economy, and cost of vehicle maintenance and are in 2019 dollars. Version 8 parameters were calibrated to 2015 data and deflated to 2010 dollars. Costs are in cents/mile.

::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-auto-op
#| tbl-cap: Auto Operating Cost Parameters
import pandas as pd
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'AutoOperatingCosts']
table = table[['Parameter','v9Value','v8Value','Notes']]
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value'}, inplace=True)
headers = ['Parameter', 'v9 Value', 'v8 Value', 'Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

The auto operating cost parameters in versions 8 and 9 were normalized by the auto-cost parameter. The percent differences between the version 8 and 9 ratios indicate that the relative cost to operate trucks compared to autos is slightly less in version 9 than in version 8.

::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-auto-cost
#| tbl-cap: Relative Auto Operating Cost Ratios
# Define the data
data = [
    ["auto"        ,	"1.00",	"1.00",	"0.0%" ],
    ["light truck" ,	"1.26",	"1.34",	"-6.4%"],
    ["medium truck",	"2.56",	"2.61",	"-2.1%"],
    ["heavy truck" ,	"3.42",	"3.48",	"-1.6%"]
]

# Create a pandas DataFrame
df = pd.DataFrame(data, columns=['Category', 'v9 Value', 'v8 Value', '% Difference'])

# Convert the DataFrame to a markdown table
headers = ['Category', 'v9 Value', 'v8 Value', '% Difference']
Markdown(tabulate(df, headers=headers, tablefmt="pipe", colalign=("left",)*len(headers), showindex=False)) 
```
:::
:::

The relationship (ratio) between the auto operating costs and the value of time affects the distance term in the best-path functions in the distribution and assignment models. The higher the ratio, the more influence the distance term will exhibit on path choice and the more the model will be sensitive to shortest path vs. shortest time. A comparison of the ratios suggests that, while the overall pattern looks similar, distance will have slightly less influence on path choice for person trips in version 9 than in version 8, meaning person trips will be slightly more sensitive to congestion (i.e. travel time). This slight difference, however, should not be large enough to fundamentally change the behavior in the model. There is a more significant difference in the ratio for truck trips suggesting that truck trips (in particular light trucks) will be a little more sensitive to the influence of congestion in version 9 than in version 8.

::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-auto-vot
#| tbl-cap: Auto Operating Cost / Value of Time Ratios
# Define the data
data = [
    ['work trips'    ,	'0.986',	'1.017',	'-3.0%'],
    ['non-work trips',	'1.276',	'1.307',	'-2.3%'],
    ['external'      ,	'1.085',	'1.144',	'-5.1%'],
    ['light truck'   , '0.738' ,    '0.820',   '-10.0%'],
    ['medium truck'  ,	'1.110',	'1.195',	'-7.1%'],
    ['heavy truck'   ,	'1.179',	'1.274',	'-7.4%']

]

# Create a pandas DataFrame
df = pd.DataFrame(data, columns=['Category', 'v9 Value', 'v8 Value', '% Difference'])

# Convert the DataFrame to a markdown table
headers = ['Category', 'v9 Value', 'v8 Value', '% Difference']
Markdown(tabulate(df, headers=headers, tablefmt="pipe", colalign=("left",)*len(headers), showindex=False)) 
```
:::
:::

### Managed Lane Costs 

Peak and off-peak toll cost parameters for tollways (FT=40) were updated to 48 cents/mile. This equates to approximately $5.00 for work trips (using an average work trip distances of 10.25) and $3.00 for non-work trips (using an average distance of 6.5 miles). 

Peak toll cost parameters for HOT lanes (FT=38) and reliability lanes were updated to 34 cents/mile. This equates to approximately $3.50 for work trips and $2.20 for non-work trips (using the same average distances for work and non-work trips). Off-peak toll cost parameters were set as half the peak cost. 

Version 9 tolls are in 2019 dollars. Toll costs for version 8 are in 2010 dollars.

::: {.grid}
::: {.g-col-3}
:::
::: {.g-col-6}
```{python}
#| label: tbl-managed-lane
#| tbl-cap: Managed Lane Cost Rates
import pandas as pd
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'ManagedLaneCosts']
table = table[['Parameter','v9Value','v8Value','Notes']]
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value'}, inplace=True)
headers = ['Parameter', 'v9 Value', 'v8 Value', 'Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

Relative to HOT toll costs, tollway costs are approximately 40% lower in version 9 than version 8, suggesting tollways would have less sensitivity to cost in version 9 than version 8. However, there are no tollways planned in the 2023 RTP.

### Parking Costs

The permanent and temporary cost fields, **PRKCSTPERM** and **PRKCSTTEMP** located in the `1_Inputs\1_TAZ\TAZ.shp` shapefile, were updated to reflect current conditions. Costs for parking in the downtown areas of Salt Lake City, Ogden, and Provo and around the universities were based on 2022 parking rates obtained from the city of Salt Lake City, web searches, and field visits.

The temporary parking cost for the Salt Lake City International Airport was set to $1.25 based on a weighted average of short-term premium and economy rates. This represents a $0.25 (25%) increase from version 8. Permanent parking costs were kept at $0 as workers at the airport do not pay for parking.

The Lagoon temporary parking cost was set to $6 based on the 2022 advertised parking rate of $18 per day by an assumed average occupancy of 3 people per vehicle. This represents a $1 (20%) increase from version 8. Permanent parking costs were kept at $0 as workers at Lagoon do not pay for parking.

Version 9 parking costs are in 2019 dollars, whereas version 8 parking costs are in 2010 dollars.

### Transit Fares

Version 9 transit fares in the `PT_Parameter\GENERAL_Fare.FAR` file in the scenario line folder were updated to reflect the 2019 full advertised fares. This represented a two-fold change to the transit fares parameter. Previous models have fares coded as “average discounted fares” which included discounts for monthly passes, education passes, fare-pay, senior discounts, employer paid passes, and other discounts. In order to make updating transit fares in the model easier and more intuitive, the input fares were kept as full advertised fares and the calculation from advertised to discounted fares is now processed in the model stream.

Version 9 uses the same average discount assumptions as version 8. The transit fare discount was calculated in previous models to be 46% off the advertised fare yielding a discounted fare rate of 54% and the following parameter was added to the `0_GeneralParameters.block`:

 - FARE_DISCOUNT = 0.54

### Bus Speed Ratios

An effort was made to refresh the bus speed factors in version 9. General transit feed specification (GTFS) data for 2019 was used to re-evaluate the version 8 bus speed ratio classifications and to estimate new bus speed ratios. The number of bus speed ratios were expanded from 6 in version 8 to 50 in version 9. The new ratios include more area type classifications as well as a classification for peak and off-peak. The bus speed ratios for versions 8 and 9 can be seen in @fig-bus-speed-ratios.

Bus speed ratio parameters were removed from the `0_GeneralParameters.block` file in version 9 and are now read in via an input file (`1_Inputs\0_GlobalData\4_ModeChoice\bus_speed_ratios.csv`). A source spreadsheet (`_source - bus_speed_ratios.xlsx`) is also included in the input folder. Modifications to the transit skim script were made to incorporate the new bus speeds input file.

```{python}
# Convert bus speeds input into long format
import pandas as pd

# add name data to expand model CSV
dfAreaTypes = pd.DataFrame([
  ['Rur','Rural'     ],
  ['Trn','Transition'],
  ['Sub','Suburban'  ],
  ['Urb','Urban'     ],
  ['CBD','CBD-Like'  ]
], columns=('AreaType','AreaTypeName'))

dfTimePeriods = pd.DataFrame([
  ['Pk','Peak'    ],
  ['Ok','Off-Peak'],
  ['DY','Daily'   ]
], columns=('TimePeriod','TimePeriodName'))

dfFunctionalClasses = pd.DataFrame([
  [1, 'Col', 'Collectors & Locals'],
  [2, 'Min', 'Minor Arterials'    ],
  [3, 'Maj', 'Major Arterials'    ],
  [4, 'Exp', 'Expressways'        ],
  [5, 'Fwy', 'Freeways & Ramps'   ]
], columns=('FC','FunctionalClass','FunctionalClassName'))

# read in bus speed ratios
dfBusSpeedRatios = pd.read_csv(r"data\bus_speed_ratios.csv").rename(columns={';FC':'FC'})

# create a list of column names to use as variable names
varCols = dfBusSpeedRatios.columns.to_list()

# remove the ID columns from variable columns list
varCols.remove('Functional Class')

# melt table to get long format using FC and FC Name as ids
dfBusSpeedRatios_long = pd.melt(dfBusSpeedRatios, id_vars=['FC'], value_vars=varCols, var_name='TimePeriod_AreaType', value_name='BusSpeedRatio')

# get Time Period and Area Type from TimePeriod_AreaType field
dfBusSpeedRatios_long['TimePeriod'] = dfBusSpeedRatios_long['TimePeriod_AreaType'].str.split('_').str[0]
dfBusSpeedRatios_long['AreaType'  ] = dfBusSpeedRatios_long['TimePeriod_AreaType'].str.split('_').str[1]

dfBusSpeedRatios_long = dfBusSpeedRatios_long.merge(dfFunctionalClasses,on='FC'        )
dfBusSpeedRatios_long = dfBusSpeedRatios_long.merge(dfTimePeriods      ,on='TimePeriod')
dfBusSpeedRatios_long = dfBusSpeedRatios_long.merge(dfAreaTypes        ,on='AreaType'  )

# limit columns and export csv
dfBusSpeedRatios_long = dfBusSpeedRatios_long[['FunctionalClass','FunctionalClassName','TimePeriod','TimePeriodName','AreaType','AreaTypeName','BusSpeedRatio']]

## create objects for observable js
#ojs_define(busdata = dfBusSpeedRatios_long, typed=True)
#ojs_define(fcnames = dfBusSpeedRatios_long[['FunctionalClassName']].drop_duplicates())
#ojs_define(tpnames = dfBusSpeedRatios_long[['TimePeriodName'     ]].drop_duplicates())
#ojs_define(atnames = dfBusSpeedRatios_long[['AreaTypeName'       ]].drop_duplicates())

dfBusSpeedRatios_long.to_csv(r'data\bus_speed_ratios_long.csv', index=False)

# export function class list csv
dfBusSpeedRatios_long[['FunctionalClass','FunctionalClassName']].drop_duplicates().to_csv('data\\functionalclass.csv', index=False)
dfBusSpeedRatios_long[['TimePeriod'     ,'TimePeriodName'     ]].drop_duplicates().to_csv('data\\timeperiod.csv'     , index=False)
dfBusSpeedRatios_long[['AreaType'       ,'AreaTypeName'       ]].drop_duplicates().to_csv('data\\areatype.csv'       , index=False)

dfBusSpeedRatios_Previous = pd.DataFrame([
   ['Collectors'                        , 0.60],
   ['Minor Arterials\n(Urb/CBD)'        , 0.65],
   ['Minor Arterials\n(Sub/Rur)'        , 0.65],
   ['Principal Arterials\n& Expressways', 0.55],
   ['Freeway Ramps'                     , 0.75],
   ['Freeways'                          , 0.95]
], columns=('FunctionalClass','BusSpeedRatio'))

dfBusSpeedRatios_Previous.to_csv(r'data\bus_speed_ratios_previous.csv', index=False)
```

::: {.panel-tabset}

#### Bus Speed Ratios Plot

```{ojs}


// read in CSVs
faDataBusSpeeds     = FileAttachment("data\\bus_speed_ratios_long.csv").csv({ typed: true });
faFunctionalClasses = FileAttachment("data\\functionalclass.csv"      ).csv({ typed: true });
faTimePeriods       = FileAttachment("data\\timeperiod.csv"           ).csv({ typed: true });
faAreaTypes         = FileAttachment("data\\areatype.csv"             ).csv({ typed: true });

viewof facetSelect  = Inputs.select(new Map([['Time Period', 'TimePeriodName'], ['Area Type', 'AreaTypeName'], ['Functional Class', 'FunctionalClassName']]), {value: 'TimePeriodName'     , label: "Columns:"});
viewof domainSelect = Inputs.select(new Map([['Time Period', 'TimePeriodName'], ['Area Type', 'AreaTypeName'], ['Functional Class', 'FunctionalClassName']]), {value: 'AreaTypeName'       , label: "X-Axis:"});
viewof strokeSelect = Inputs.select(new Map([['Time Period', 'TimePeriodName'], ['Area Type', 'AreaTypeName'], ['Functional Class', 'FunctionalClassName']]), {value: 'FunctionalClassName', label: "Series:"});

// FILTER DATA
//viewof functionalclasses_checked = Inputs.checkbox(faFunctionalClasses.map(function(d) {return d.FunctionalClassName}),
//                                                   {value: faFunctionalClasses.map(function(d) {return d.FunctionalClassName}),
//                                                    label: "Function Class"});
//viewof timeperiods_checked       = Inputs.checkbox(faTimePeriods      .map(function(d) {return d.TimePeriodName     }),
//                                                   {value: faTimePeriods      .map(function(d) {return d.TimePeriodName     }),
//                                                    label: "Time Period"   });
//filteredBusData = faDataBusSpeeds.filter(function(busspeed) {
//  return functionalclasses_checked.includes(busspeed.FunctionalClassName) &&
//         timeperiods_checked      .includes(busspeed.TimePeriodName     )// &&
//         //areatypes        .includes(busspeed.AreaTypeName  );
//});

domainFromSelect = {
  switch(domainSelect) {
    case 'TimePeriodName'     : return faTimePeriods      .map(function(d) {return d.TimePeriodName     }); break;
    case 'AreaTypeName'       : return faAreaTypes        .map(function(d) {return d.AreaTypeName       }); break;
    case 'FunctionalClassName': return faFunctionalClasses.map(function(d) {return d.FunctionalClassName}); break;
    default: return;
  }
}

//xPlotDomainSelect = {
//  switch(domainSelect) {
//    case 'TimePeriodName'     : return "TimePeriod"     ; break;
//    case 'AreaTypeName'       : return "AreaType"       ; break;
//    case 'FunctionalClassName': return "FunctionalClass"; break;
//    default: return;
//  }
//}

fLabel = {
  switch(facetSelect) {
    case 'TimePeriodName'     : return "Time Period"     ; break;
    case 'AreaTypeName'       : return "Area Type"       ; break;
    case 'FunctionalClassName': return "Functional Class"; break;
    default: return;
  }
}

xLabel = {
  switch(domainSelect) {
    case 'TimePeriodName'     : return "Time Period"     ; break;
    case 'AreaTypeName'       : return "Area Type"       ; break;
    case 'FunctionalClassName': return "Functional Class"; break;
    default: return;
  }
}

domainFacetSelect = {
  switch(facetSelect) {
    case 'TimePeriodName':
      return faTimePeriods.map(function(d) {
          return d.TimePeriodName
        });
      break;
    case 'AreaTypeName':
      return faAreaTypes.map(function(d) {
          return d.AreaTypeName
        });
      break;
    case 'FunctionalClassName':
      return faFunctionalClasses.map(function(d) {
          return d.FunctionalClassName
        });
      break;
    default:
      return; 
  }
}
```


```{ojs}
//|label: fig-bus-speed-ratios
//|fig-cap: Bus Speed Ratios
//|echo: false
Plot.plot({
  grid: true,
  aspectRatio: 0.25,
  facet: { data: faDataBusSpeeds, x: facetSelect, label: fLabel, marginTop: 40},
  x: {
    label: xLabel,
    domain: domainFromSelect,
    tickSize: 4,
    tickPadding: 2,
    marginTop: 40,
    tickRotate: 90,
  },
  y: {
    label: "Bus Speed Ratio",
    domain: [0, 1],
    fontSize: 8
  },
  color: { type: "categorical", legend: true, legendStyle: { fontSize: 16 } },
  style: {
    fontSize: 12
  },
  marginTop: 60,
  marginBottom: 120,
  marks: [
    Plot.frame(),
    Plot.line(faDataBusSpeeds, { x: domainSelect, y: "BusSpeedRatio", stroke: strokeSelect, strokeWidth: 2 }),
    Plot.dot(faDataBusSpeeds, { x: domainSelect, y: "BusSpeedRatio", stroke: strokeSelect, r: 4, fill: strokeSelect })
  ]
})

```

#### Bus Speed Ratios Data

```{ojs}
Inputs.table(faDataBusSpeeds, {
  style: {
    fontSize: 12,
  },
  columns: [
    "FunctionalClassName",
    "TimePeriodName",
    "AreaTypeName",
    "BusSpeedRatio"
  ],
  header: {
    FunctionalClassName: "Functional Class",
    TimePeriodName: "Time Period",
    AreaTypeName: "Area Type",
    BusSpeedRatio: "Bus Speed Ratio"
  }
})

```

#### Previous Bus Speed Ratios

```{ojs}

// read in CSVs
faDataBusSpeeds_previous = FileAttachment("data\\bus_speed_ratios_previous.csv").csv({ typed: true });
```

```{ojs}
//|label: fig-bus-speed-ratios-previous
//|fig-cap: Previous Bus Speed Ratios
//|echo: false

Plot.plot({
  grid: true,
  aspectRatio: 0.5,
  style: {
    fontSize: 12,
  },
  margin: 40,
  marginBottom: 150,
  x: {
    label: "",
    //tickFormat: () => "",
    tickRotate: 90,
    domain: faDataBusSpeeds_previous.map(function(d) {return d.FunctionalClass}),
    tickSize: 0
  },
  y: {label: "Bus Speed Ratio" , domain: [0, 1]},
  color: { type: "categorical", legend: false },
  marks: [
    Plot.frame(),
    Plot.barY(faDataBusSpeeds_previous, {x: "FunctionalClass", y: "BusSpeedRatio", stroke: "FunctionalClass", fill: "FunctionalClass"})
  ]  
})

```

:::

### Initial Wait Time

The initial wait time curves found in `1_Inputs\4_Transit\Lin_2019\PT_Parameter\GENERAL_System.PTS` were updated in version 9 to make the mode choice model more sensitive to frequency changes. Version 8 initial wait time curves were based on the premise that transit patrons are familiar with the transit schedule and plan their trip to initially board with the minimum amount of delay. To reflect this behavior, a 7.5-minute cap for bus and a 5-minute cap for rail was set on the initial wait time parameter. This cap, however, caused the model to not see much of the benefit/disbenefit a transit user would experience when headways are changed, in particular for longer when moving away/to longer headways.

The version 9 initial wait time parameter was set based on research given to UTA of industry standard-practice initial wait time curves. A range of initial wait time curve values were presented in the research. Version 9 was calibrated to a more conservative curve in that range. The version 9 initial wait time curve can be seen in @fig-initial-wait-time.

The new initial wait time curve in version 9 had the effect of increasing transit ridership relative to version 8 in scenarios where an investment in more frequent transit was projected. Early testing showed this increase to be on the order of magnitude of 8-12% based on a comparison of 2019 RTP and draft 2023 RTP transportation investments. However, the actual change in ridership would vary depending on the initial starting point and the magnitude of change in transit frequency. 

![Initial Wait Time Curve](_pictures/initial-wait-time.png){#fig-initial-wait-time width=60%}

### Auto Occupancy

Auto occupancy variables were expanded to include additional trips purposes. New auto occupancy rates were calculated based on 2012 Household Travel Survey records for just the Wasatch Front model space. Auto-occupancy rates for external trips are the average of internal-external and external-internal trips. The new version 9 auto occupancy rates can be found in @tbl-auto-occ1 and @tbl-auto-occ1.


::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-10}
```{python}
#| label: tbl-auto-occ1
#| tbl-cap: Vehicle Occupancy Rates
#| tbl-colwidths: [20,8,35,8,29]
import pandas as pd
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'AutoOccupancy1']
table = table[['v9Parameter','v9Value', 'v8Parameter','v8Value','Notes']]
table['v9Value'] = table['v9Value'].astype('float').apply(lambda x: "{:,.2f}".format((x)))
table['v8Value'] = table['v8Value'].astype('float').apply(lambda x: "{:,.2f}".format((x)))
table = table.replace(np.nan,'',regex=True)
table = table.replace('nan','',regex=True) 
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value', 'v9Parameter':'v9 Parameter', 'v8Parameter':'v8 Parameter'}, inplace=True)
headers = ['v9 Parameter','v9 Value', 'v8 Parameter','v8 Value','Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-10}
```{python}
#| label: tbl-auto-occ2
#| tbl-cap: Vehicle Occupancy 3+ Rates
#| tbl-colwidths: [24,8,24,8,36]
import pandas as pd
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'AutoOccupancy2']
table = table[['v9Parameter','v9Value', 'v8Parameter','v8Value','Notes']]
table['v9Value'] = table['v9Value'].astype('float').apply(lambda x: "{:,.2f}".format((x)))
table['v8Value'] = table['v8Value'].astype('float').apply(lambda x: "{:,.2f}".format((x)))
table = table.replace(np.nan,'',regex=True)
table = table.replace('nan','',regex=True) 
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value', 'v9Parameter':'v9 Parameter', 'v8Parameter':'v8 Parameter'}, inplace=True)
headers = ['v9 Parameter','v9 Value', 'v8 Parameter','v8 Value','Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

## Other Input Files

### K-12 School Enrollment

The kindergarten through 12th grade (K-12) school enrollment fields, **Enrol_Elem**, **Enrol_Midl**, and **Enrol_High** located in the socioeconomic input files, were updated using the 2019 statewide school enrollment database. This was done at the state-wide level and then applied to the Wasatch Front region. Additionally, a point shapefile of the state-wide dataset is included with the TDM, as shown in @fig-school-locations.

```{ojs}
//|echo: false
// setup mapping and layers
L = require('leaflet@1.2.0')
html`<link href='${resolve('leaflet@1.2.0/dist/leaflet.css')}' rel='stylesheet' />`

geojsonK12Enroll = FileAttachment("data/k12enroll.geojson").json()
```


```{ojs}
//|label: fig-school-locations
//|fig-cap: K-12 School Locations
//|echo: false

mapK12Enroll = {

  let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });
  yield container;
  
  let map = L.map(container).setView([40.7608, -111.8910], 8.25);

  let greyLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  var cHigh = "#FF0000"
  var cMidl = "#00FF00"
  var cElem = "#0000FF"

  var geojsonMarkerOptions_High = {
      radius: 4,
      fillColor: cHigh,
      color: cHigh,
      weight: 2,
      opacity: 1,
      fillOpacity: 1.0,
  };

  var geojsonMarkerOptions_Midl = {
      radius: 4,
      fillColor: cMidl,
      color: cMidl,
      weight: 2,
      opacity: 1,
      fillOpacity: 1.0,
  };
  var geojsonMarkerOptions_Elem = {
      radius: 4,
      fillColor: cElem,
      color: cElem,
      weight: 2,
      opacity: 1,
      fillOpacity: 1.0,
  };
            
  // function to use different icons based on number of stations
  function markerByEnrollment(feature) {
    if (feature.properties.Enrol_High >= 100) {
      return geojsonMarkerOptions_High
    } else if (feature.properties.Enrol_Midl >= 100){
      return geojsonMarkerOptions_Midl;
    } else{
      return geojsonMarkerOptions_Elem;
    }
  };

  function getColor(c) {
    if (c=='High School') {
      return cHigh;
    } else if (c=='Middle School') {
      return cMidl;
    } else if (c=='Elementary School') {
      return cElem;
    }
  };
          
  // create the GeoJSON layer and call the styling function with each marker
  var layerSchools = L.geoJSON(geojsonK12Enroll,  {
    pointToLayer: function (feature, latlng) {
      var mypopup = L.popup().setContent("<b>" + feature.properties.SchoolName + " Enrollment</b>" +
                    "<br><b>High School: </b>" + feature.properties.Enrol_High +
                    "<br><b>Middle School: </b>" + feature.properties.Enrol_Midl +
                    "<br><b>Elementary School: </b>" + feature.properties.Enrol_Elem);
      var mymarker = L.circleMarker(latlng, markerByEnrollment(feature));
      mymarker.bindPopup(mypopup);
      return mymarker;
    }
  }).addTo(map);

  var legend = L.control({position: 'bottomleft'});
    legend.onAdd = function (map) {
      var div = L.DomUtil.create('div', 'info legend');
      var labelsBill = []; // legend title
      var lcategories = ['High School','Middle School','Elementary School'];

      for (var i = 0; i < lcategories.length; i++) {
        div.innerHTML += 
          labelsBill.push(
            '<i class="bi bi-circle-fill" style="color:' + getColor(lcategories[i]) + '"></i> ' +
          (lcategories[i] ? lcategories[i] : '+'));
      }
      div.innerHTML = labelsBill.join('<br>');

      // Add CSS style for the background color
      div.style.backgroundColor = 'lightgray';
      div.style.padding = '10px';
      
      return div;
    };
    legend.addTo(map);

  //let lyrK12Enroll = L.geoJson(geojsonK12Enroll, { size: 5, color: '#FFFFFF'}).addTo(map);
  
}
```

### College Enrollment

**Base Distribution**

The college student base-year distribution located in `1_Inputs\0_GlobalData\0_TripTables\BaseDistribution.csv` was updated to reflect current conditions. Dormitory populations were assigned to TAZs based on group quarter data from the Census. The remaining enrollment was distributed using StreetLight origin-destination and USHE enrollment data.

**Enrollment Forecast**

The future-year college enrollment control totals located in `1_Inputs\0_GlobalData\0_TripTables\TripTableControlTotal.csv` were updated to reflect current USHE and other college enrollment data. Colleges that were “removed” in version 9 had the college enrollment control total set to zero. A comparison of the version 9 and version 8 (specifically, version 8.3.2) college enrollment control totals can be seen in @fig-college-enrollment.

```{python}
import pandas as pd
df_college_base = pd.read_csv('data/college-enrollment-forecast.csv')
df_college_long = pd.melt(df_college_base, id_vars=['Version','Year'], var_name='College', value_name = 'Enrollment')

```
```{python}
ojs_define(dfcollege = df_college_long)
```

```{ojs}
collegeT = transpose(dfcollege)

optionsColleges = 
[
  ['LDS Business College', 'LDSBC'],
  ['Westminster', 'Westmin'],
  ['UofU Main Campus', 'UofU_Main'],
  ['UofU Medical', 'UofU_Med'],
  ['WSU Main Campus', 'WSU_Ogden'],
  ['WSU Davis', 'WSU_Davis'],
  ['WSU West Campus', 'WSU_West'],
  ['SLCC Main Campus', 'SLCC_TL'],
  ['SLCC South City', 'SLCC_SC'],
  ['SLCC Jordan', 'SLCC_JD'],
  ['SLCC Meadowbrook', 'SLCC_Mead'],
  ['SLCC Miller', 'SLCC_ML'],
  ['SLCC Library', 'SLCC_LB'],
  ['SLCC Hiland', 'SLCC_HL'],
  ['SLCC Airport', 'SLCC_Airp'],
  ['SLCC Westpoint', 'SLCC_West'],
  ['SLCC Herriman', 'SLCC_HM'],
  ['BYU', 'BYU'],
  ['UVU Main Campus', 'UVU_main'],
  ['UVU Geneva', 'UVU_Geneva'],
  ['UVU Lehi', 'UVU_ThankP'],
  ['UVU Vineyard', 'UVU_VINE'],
  ['UVU Payson', 'UVU_PAYSON']]

viewof selectCollege = Inputs.select(new Map(optionsColleges), {value: 'LDSBC', label: 'College: '});

// FILTER DATA
college_v98= collegeT.filter(function(collegeData) {
  return selectCollege   == collegeData.College
});

college_v9= collegeT.filter(function(collegeData) {
  return selectCollege   == collegeData.College &&
  'v9' == collegeData.Version; 
});

college_v8= collegeT.filter(function(collegeData) {
  return selectCollege   == collegeData.College &&
  'v832' == collegeData.Version; 
});

maxY1 = Math.max(...college_v98.map(item => item.Enrollment));
```

```{ojs}
html`<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Version Display</title>
    <style>
        .green-text {
            color: green;
            font-size: 12px;
            font-weight: bold;
            padding-left: 60px;
        }

        .blue-text {
            color: #376092;
            font-size: 12px;
            font-weight: bold;
            padding-left: 20px;
        }
    </style>
</head>
<body>
    <span class="green-text"> —— Version 8</span>
    <span class="blue-text"> —— Version 9</span>
</body>
</html>`
```

```{ojs}
//|label: fig-college-enrollment
//|fig-cap: College Enrollment Forecasts
//|echo: False
Plot.plot({
  grid: true,
  aspectRatio: 0.5,
  x: { label: 'Year', tickFormat: d => d },
  y: { label: 'Enrollment', tickFormat: f => f, domain: [0, maxY1] },
  marginRight: 60,
  marginLeft: 60,
  style: {
    fontSize: 15
  },
  marginTop: 10,
  marginBottom: 60,
  marks: [
    Plot.line(
      college_v9, { x: 'Year', y: 'Enrollment', stroke: "#376092", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.line(
      college_v8, { x: 'Year', y: 'Enrollment', stroke: "#77933c", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.frame({ strokeOpacity: 0.2 }),
  ]
});
```

**College Enrollment Factors**

The college enrollment factors located in `1_Inputs\0_GlobalData\0_TripTables\College_Factors.csv` were updated in association with the college enrollment control totals. 

 - % Removed – For colleges that were removed, the factor was reset to zero.
 - Full-Time Equivalent (FTE) – the FTE rate was reduced for all colleges. This will have the effect of increasing the number of college students in the HBC college trip table. For colleges that were removed, the factor was reset to one.
 - Home-Based-College (HBC) Trip Rate – For colleges that were removed, the factor was reset to zero.

A comparison of the version 9 and version 8 (specifically, version 8.3.2) college enrollment control totals can be seen in @tbl-college-enrollment-fcts.

::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-10}
```{python}
#| label: tbl-college-enrollment-fcts
#| tbl-cap: College Enrollment Factors
# Define the data
data = [
    ['WFRC Colleges', 'Ensign'	        ,  0.101,	0.101,	1.179,	1.179,	0.930,	0.930, ''         ],
    [''             , 'Westminster'	    ,  0.012,	0.012,	1.098,	1.098,	0.930,	0.930, ''         ],
    [''             , 'UofU Main'	      ,  0.026,	0.026,	1.025,	1.210,	0.930,	0.930, ''         ],
    [''             , 'UofU Med'	      ,  0	  , 0.026,	1	 ,  1.210,	0	 ,  0.930, '(removed)'],
    [''             , 'WSU Main'	      ,  0.215,	0.215,	1.038,	1.588,	0.830,	0.830, ''         ],
    [''             , 'WSU Davis'	      ,  0.309,	0.309,	1.038,	1.588,	0.677,	0.677, ''         ],
    [''             , 'WSU West'	      ,  0	  , 0.309,	1	 ,  1.588,	0	 ,  0.677, '(removed)'],
    [''             , 'SLCC Main'	      ,  0.341,	0.341,	1.208,	2.005,	0.622,	0.622, ''         ],
    [''             , 'SLCC South City' ,  0.341,	0.341,	1.208,	2.005,	0.642,	0.642, ''         ],
    [''             , 'SLCC Jordan'	    ,  0.341,	0.341,	1.208,	2.005,	0.569,	0.569, ''         ],
    [''             , 'SLCC Meadowbrook',  0	  , 0.341,	1	 ,  2.005,	0	 ,  0.569, '(removed)'],
    [''             , 'SLCC Miller'	    ,  0.341,	0.341,	1.208,	2.005,	0.616,	0.616, ''         ],
    [''             , 'SLCC Library'    ,  0	  ,  0.341,	1	 ,  2.005,	0	 ,  0.616, '(removed)'],
    [''             , 'SLCC Highland'   ,  0	  ,  0.341,	1	 ,  2.005,	0	 ,  0.616, '(removed)'],
    [''             , 'SLCC Airport'    ,  0	  ,  0.341,	1	 ,  2.005,	0	 ,  0.616, '(removed)'],
    [''             , 'SLCC Westpointe' ,  0	  ,  0.341,	1	 ,  2.005,	0	 ,  0.616, '(removed)'],
    [''             , 'SLCC Herriman'   ,  0	  ,  0.341,	1	 ,  2.005,	0	 ,  0.616, '(removed)'],
    ['MAG Colleges' , 'BYU'             ,  0.026,	0.026,	1.025,	1.210,	0.930,	0.930, ''         ],
    [''             , 'UVU Main'	      ,  0.270,	0.270,	1.097,	1.400,	0.945,	0.945, ''         ],
    [''             , 'UVU Geneva'	    ,  0	  , 0.270,	1	 ,  1.400,	0	 ,  0.945, '(removed)'],
    [''             , 'UVU Lehi'	      ,  0.270,	0.270,	1.097,	1.400,	0.945,	0.945, ''         ],
    [''             ,' UVU Vineyard'    ,  0.270,	0.270,	1.097,	1.400,	0.945,	0.945, ''         ],
    [''             , 'UVU Payson'	    ,  0.270,	0.270,	1.097,	1.400,	0.945,	0.945, ''         ]
]

# Create a pandas DataFrame
df = pd.DataFrame(data, columns=['Areas', 'Campus', ' % Removed v9 Value', '% Removed v8 Value', 'FTE Rate v9 Value', 'FTE Rate v8 Value', 'HBC Trip Rate v9 Value', 'HBC Trip Rate v8 Value', 'Notes'])

# Convert the DataFrame to a markdown table
headers = ['Areas', 'Campus', ' % Removed <br> v9 Value', '% Removed <br> v8 Value', 'FTE Rate <br> v9 Value', 'FTE Rate <br> v8 Value', 'HBC Trip Rate <br> v9 Value', 'HBC Trip Rate <br> v8 Value', 'Notes']
Markdown(tabulate(df, headers=headers, tablefmt="pipe", colalign=("left",)*len(headers), showindex=False)) 
```
:::
:::

## Calibration

### Trip Generation Rates

Trip generation rates were updated in version 9 as part of the model’s base year calibration. Person-trip production rates (e.g. HBW, HBShp, HBOth, etc.) were increased in the model script by approximately 5% over version 8 rates resulting in a regional increase of both productions and attractions of 5% (see @fig-pa-person). County-level adjustments were left the same as the previous model. When combined with the changes in the 2019 socioeconomic data, the total person-trip productions and attractions in individual counites was slightly different with the most notable differences in Weber, Salt Lake, and Utah counties. The county production/attraction balance stayed fairly consistent.

![Person-Trip Productions & Attractions by County](_pictures/person-trip-pa-county.png){#fig-pa-person width=56%}

Short haul tuck calculations were revamped and simplified mirroring changes made to truck trip calculations in USTM. The moving people, goods, and services by light, medium, and heavy truck detailed calculations were collapsed to just light, medium, and heavy categories. (Note, the trip generation script still includes code for the more detailed calculations, however most of this code is not being used.) The new short haul truck trip variables and coefficients were combined based on the original code structure. The short haul truck trip rates were then adjusted by county. Significant changes were made to the county light, medium, and heavy truck adjustment factors resulting in a 34% increase in overall short haul truck productions and attractions. Light trucks accounted for the majority of this change with a regional increase of 50%. Medium trucks saw a regional increase of 29%. Heavy trucks decreased by 1%. In addition to the changes in regional truck trip ends and vehicle classification makeup, significant changes occurred in the county-level distribution of the trip ends with Salt Lake County truck trip ends held constant yielding more than twice the regional change in the other counties (see @fig-pa-truck). 

![Short Haul Truck Productions & Attractions by County](_pictures/short-haul-pa-county.png){#fig-pa-truck width=56%}

The changes to the short haul trip end calculations constitute a new behavioral model.

### Distribution Friction Factors

The observed time, distance, and generalized cost trip length frequencies and average trip lengths, which serve as the targets for friction factor calibration and validation, were updated in version 9 to reflect the 2019 base year network and refreshed data processing. The updated average trip length frequencies are found in @fig-ave-trip-length.

![Observed Average Trip Length](_pictures/ave-trip-length.png){#fig-ave-trip-length width=56%}

Trip distribution friction factors were updated in version 9 as part of the model’s base year calibration. Six new external-truck friction factors were added: IX_LT, IX_MD, IX_HV, XI_LT, XI_MD, and XI_HV. Note however that IX_LT and XI_LT friction factors were set equal to IX and XI, respectively. StreetLight truck origin-destination data was used to help calibrate the internal truck and external friction factors. A comparison of the version 9 and version 8 friction factors is found in @figxx.


```{python}
import pandas as pd
df_ff_base = pd.read_csv('data/ff-v9-v832.csv')
df_ff_long = pd.melt(df_ff_base, id_vars=['Version','Bin'], var_name='Purpose', value_name = 'Distribution')
```
```{python}
ojs_define(dff = df_ff_long)
```

```{ojs}
ffT = transpose(dff)

optionsFF = 
[
  ['HBW', 'HBW'],	
  ['HBShp', 'HBShp'],
  ['HBOth', 'HBOth'],
  ['HBSch_Pr', 'HBSch_Pr'],
  ['HBSch_Sc', 'HBSch_Sc'],
  ['NHBW', 'NHBW'],
  ['NHBNW', 'NHBNW'],
  ['LT', 'LT'],
  ['MD', 'MD'],
  ['HV', 'HV'],
  ['IX', 'IX'],
  ['IX_LT', 'IX_LT'],
  ['IX_MD', 'IX_MD'],
  ['IX_HV', 'IX_HV'],
  ['XI',	'XI'],
  ['XI_LT', 'XI_LT'],
  ['XI_MD', 'XI_MD'],
  ['XI_HV', 'XI_HV']
]
 
viewof selectFF = Inputs.select(new Map(optionsFF), {value: 'HBW', label: 'Purpose: '});

// FILTER DATA
ff_v98= ffT.filter(function(ffData) {
  return selectFF == ffData.Purpose;
});

ff_v9= ffT.filter(function(ffData) {
  return selectFF == ffData.Purpose &&
  'v9' == ffData.Version; 
});

ff_v8= ffT.filter(function(ffData) {
  return selectFF   == ffData.Purpose &&
  'v832' == ffData.Version; 
});
```

```{ojs}
domainVals = [
    {Purpose: 'HBW',      X1MAX: 30, X2MIN: 20, X2MAX: 80 , X3MIN: 80 , X3MAX: 260, Y2MAX: .060, Y3MAX: .002  },
    {Purpose: 'HBShp',    X1MAX: 16, X2MIN: 15, X2MAX: 50 , X3MIN: 40 , X3MAX: 150, Y2MAX: .020, Y3MAX: .0003 },
    {Purpose: 'HBOth',    X1MAX: 16, X2MIN: 15, X2MAX: 50 , X3MIN: 40 , X3MAX: 150, Y2MAX: .020, Y3MAX: .0003 },
    {Purpose: 'HBSch_Pr', X1MAX: 10, X2MIN: 10, X2MAX: 40 , X3MIN: 40 , X3MAX: 100, Y2MAX: .003, Y3MAX: .00003},
    {Purpose: 'HBSch_Sc', X1MAX: 10, X2MIN: 10, X2MAX: 40 , X3MIN: 40 , X3MAX: 100, Y2MAX: .003, Y3MAX: .00003},
    {Purpose: 'NHBW',     X1MAX: 20, X2MIN: 20, X2MAX: 100, X3MIN: 100, X3MAX: 230, Y2MAX: .040, Y3MAX: .001  },
    {Purpose: 'NHBNW',    X1MAX: 20, X2MIN: 20, X2MAX: 100, X3MIN: 100, X3MAX: 230, Y2MAX: .040, Y3MAX: .001  },
    {Purpose: 'LT',       X1MAX: 10, X2MIN: 10, X2MAX: 60 , X3MIN: 60 , X3MAX: 120, Y2MAX: .040, Y3MAX: .001  },
    {Purpose: 'MD',       X1MAX: 10, X2MIN: 10, X2MAX: 60 , X3MIN: 60 , X3MAX: 120, Y2MAX: .040, Y3MAX: .001  },
    {Purpose: 'HV',       X1MAX: 10, X2MIN: 10, X2MAX: 60 , X3MIN: 60 , X3MAX: 120, Y2MAX: .040, Y3MAX: .001  },
    {Purpose: 'IX',       X1MAX: 80, X2MIN: 80, X2MAX: 200, X3MIN: 200, X3MAX: 300, Y2MAX: .060, Y3MAX: .03   },
    {Purpose: 'IX_LT',    X1MAX: 80, X2MIN: 80, X2MAX: 200, X3MIN: 200, X3MAX: 300, Y2MAX: .060, Y3MAX: .03   },
    {Purpose: 'IX_MD',    X1MAX: 80, X2MIN: 80, X2MAX: 200, X3MIN: 200, X3MAX: 300, Y2MAX: .060, Y3MAX: .03   },
    {Purpose: 'IX_HV',    X1MAX: 80, X2MIN: 80, X2MAX: 200, X3MIN: 200, X3MAX: 300, Y2MAX: .060, Y3MAX: .03   },
    {Purpose: 'XI',       X1MAX: 25, X2MIN: 20, X2MAX: 120, X3MIN: 80 , X3MAX: 280, Y2MAX: .080, Y3MAX: .008  },
    {Purpose: 'XI_LT',    X1MAX: 25, X2MIN: 20, X2MAX: 120, X3MIN: 80 , X3MAX: 280, Y2MAX: .080, Y3MAX: .008  },
    {Purpose: 'XI_MD',    X1MAX: 25, X2MIN: 20, X2MAX: 120, X3MIN: 80 , X3MAX: 280, Y2MAX: .080, Y3MAX: .008  },
    {Purpose: 'XI_HV',    X1MAX: 25, X2MIN: 20, X2MAX: 120, X3MIN: 80 , X3MAX: 280, Y2MAX: .080, Y3MAX: .008  }
]

domainFilter= domainVals.filter(function(data) {
  return selectFF == data.Purpose; 
});

x1max = domainFilter[0].X1MAX;
x2min = domainFilter[0].X2MIN;
x2max = domainFilter[0].X2MAX;
x3min = domainFilter[0].X3MIN;
x3max = domainFilter[0].X3MAX;
y2max = domainFilter[0].Y2MAX;
y3max = domainFilter[0].Y3MAX;

//{return(x1max)}
```

```{ojs}
html`<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Version Display</title>
    <style>
        .green-text {
            color: green;
            font-size: 12px;
            font-weight: bold;
            padding-left: 60px;
        }

        .blue-text {
            color: #376092;
            font-size: 12px;
            font-weight: bold;
            padding-left: -20px;
        }
    </style>
</head>
<body>
    <span class="green-text"> —— Version 8</span>
    <span class="blue-text"> —— Version 9</span>
</body>
</html>`
```

```{ojs}
//|label: fig-ff-diff
//|fig-cap: Friction Factors
//|fig-subcap:
//|   - "Beginning of Curve"
//|   - "Middle of Curve"
//|   - "End of Curve"
//|layout-ncol: 3
//|echo: False
Plot.plot({
  grid: true,
  aspectRatio: 0.5,
  x: { label: 'Bin', tickFormat: d => d , domain:[0,x1max]},
  y: { label: 'Distribution', tickFormat: f => f, domain: [0, 1] },
  marginRight: 60,
  marginLeft: 60,
  color: { type: "categorical", legend: true, legendStyle: { fontSize: 23 } },
  style: {
    fontSize: 23
  },
  marginTop: 10,
  marginBottom: 60,
  height: 700,
  marks: [
    Plot.line(
      ff_v9, { x: 'Bin', y: 'Distribution', stroke: "#376092", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.line(
      ff_v8, { x: 'Bin', y: 'Distribution', stroke: "#77933c", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.frame({ strokeOpacity: 0.2 }),
      [
      Plot.text([`\n   ——   Current Projection \n\n   —  — Previous Projection`], {frameAnchor: "top-right", fontSize: 24})
  ]]
});

Plot.plot({
  grid: true,
  aspectRatio: 0.5,
  x: { label: 'Bin', tickFormat: d => d , domain:[x2min,x2max]},
  y: { label: 'Distribution', tickFormat: f => f, domain: [0, y2max] },
  marginRight: 60,
  marginLeft: 60,
  color: { type: "categorical", legend: true, legendStyle: { fontSize: 23 } },
  style: {
    fontSize: 23
  },
  marginTop: 10,
  marginBottom: 60,
  height: 700,
  marks: [
    Plot.line(
      ff_v9, { x: 'Bin', y: 'Distribution', stroke: "#376092", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.line(
      ff_v8, { x: 'Bin', y: 'Distribution', stroke: "#77933c", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.frame({ strokeOpacity: 0.2 }),
  ]
});

Plot.plot({
  grid: true,
  aspectRatio: 0.5,
  x: { label: 'Bin', tickFormat: d => d , domain:[x3min,x3max]},
  y: { label: 'Distribution', tickFormat: f => f, domain: [0, y3max] },
  marginRight: 60,
  marginLeft: 60,
  color: { type: "categorical", legend: true, legendStyle: { fontSize: 23 } },
  style: {
    fontSize: 23
  },
  marginTop: 10,
  marginBottom: 60,
  height: 700,
  marks: [
    Plot.line(
      ff_v9, { x: 'Bin', y: 'Distribution', stroke: "#376092", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.line(
      ff_v8, { x: 'Bin', y: 'Distribution', stroke: "#77933c", strokeWidth: 4, color: { legend: 'Version' } }),
    Plot.frame({ strokeOpacity: 0.2 }),
  ]
});
```


### K-Factors

K-factor variables were expanded by trip purpose to allow for more flexibility in calibrating the distribution model. However, no K-factors were needed for calibration. All K-factors were reset to 1.


::: {.grid}
::: {.g-col-2}
:::
::: {.g-col-8}
```{python}
#| label: tbl-kfactors
#| tbl-cap: Reset K-Factors
#| tbl-colwidths: [37,23,11,18,11]
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'KFactors']
table = table[['SubHeader','v9Parameter','v9Value', 'v8Parameter','v8Value']]
table = table.rename(columns={'SubHeader':'Area'})
table['v9Value'] = table['v9Value'].astype('float').apply(lambda x: "{:,.2f}".format((x)))
table['v8Value'] = table['v8Value'].astype('float').apply(lambda x: "{:,.2f}".format((x)))
table = table.replace(np.nan,'',regex=True)
table = table.replace('nan','',regex=True) 
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value', 'v9Parameter':'v9 Parameter', 'v8Parameter':'v8 Parameter'}, inplace=True)
headers = ['Area', 'v9 Parameter','v9 Value', 'v8 Parameter','v8 Value']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

### Mode Choice Constants

Mode choice constants were updated in version 9 as part of the model’s base year calibration.

In addition, the parameter used to set the Core Bus constant was renamed and lowered to 0.33. The effect of this change makes mode 5 in the model a little less attractive in version 9 than it was in version 8.


::: {.grid}
::: {.g-col-2}
:::
::: {.g-col-8}
```{python}
#| label: tbl-vot2
#| tbl-cap: Core Bus Constant Multiplier
#| tbl-colwidths: [30,8,30,8,20]
import pandas as pd
table = pd.read_csv('tables/1-genparams.csv')
table = table.loc[table['Table'] == 'VOT2']
table = table[['v9Parameter','v9Value', 'v8Parameter','v8Value','Notes']]
table.rename(columns = {'v9Value':'v9 Value', 'v8Value':'v8 Value', 'v9Parameter':'v9 Parameter', 'v8Parameter':'v8 Parameter'}, inplace=True)
headers = ['v9 Parameter','v9 Value', 'v8 Parameter','v8 Value','Notes']
Markdown(tabulate(table, 
  headers=headers, 
  tablefmt="pipe", 
  colalign=("left",)*len(headers), 
  showindex=False)
)
```
:::
:::

Adjustment factors were added to the mode choice logit model to adjust CRT ridership in Davis and Utah counties. The parameters are applied in the utility calculation and represent a penalty/incentive in equivalent minutes.