
PARAMETERS zones=@UsedZones@  ; Number of Zones in OD Matrix and Network
PARAMETERS COMBINE=EQUI  ;Combine Iterative Arc Solution Sets to attain system equilibrium
PARAMETERS CAPFAC= 1.0


;NOTE:
;	In this script we have VEHICLE CLASSES & LINK CLASSES
;	There are currently 5 Vehicle Classes
;	There are currently 6 Link Classes
; 	We tried to be careful to clarify when we are using link class and
;   		when we are referring to vehicle class.

;each LINK CLASS has a different volume-delay function
;Link Class 1: freeways: non-managed lanes, centroids
;Link Class 2: Bangerter-type roads (ft 11)
;Link Class 3: Principal and Minor Arterials
;Link Class 4: Collectors
;Link Class 5: Ramp
;Link Class 6: HOV/HOT

;each VEHICLE CLASS can use different facilities, and/or has a different cost function
;Vehicle Class 1: non-managed lane trips, drive alone
;Vehicle Class 2: non-managed lane trips, shared ride
;Vehicle Class 3: HOV lane users
;Vehicle Class 4: toll lane users, drive alone
;Vehicle Class 5: toll lane users, shared ride
;NOTE: "HOV" trips are shared ride trips using HOV lanes
;	The majority of shared ride trips use non-managed lane paths

;calculate free-flow time
;calculate capacity
;assign link classes based on functional type
;initialize link costs for each vehicle class
PHASE=LINKREAD
  lw.BASE_TIME=(LI.DISTANCE/LI.SFF)*60
  C  = LI.CAP1HR1LN*LI.lanes*(hrsinperiod)  ;Period's LOS E link capacity
 
  LW.TOLL_COST_PK = 0
  LW.TOLL_COST_OK = 0
  LW.TOLL_COST_PK_SR2 = 0
  LW.TOLL_COST_OK_SR2 = 0

   ;Assign LINK CLASS
   ;Groups are similar to classes, but are used to exclude certain links in assigning certain vehicle classes
   if (LI.FT==1,29-33,35)  ;freeways and centroids
     LINKCLASS = 1
   elseif (LI.FT==11)   ;Bangerter-types
     LINKCLASS = 2
   elseif (LI.FT==2,3,9,10,22-23,42-43)   ;P & M Arts
     LINKCLASS = 3
   elseif (LI.FT==4-5,24,44)   ;Coll
     LINKCLASS = 4
   elseif (LI.FT==29) ;freeway to freeway Ramps
     LINKCLASS = 5
   elseif (LI.FT==36,37) ;on/off Ramps
     LINKCLASS = 5
     LW.ramppenalty = 0.5*LI.SFF_TIME  ;ramp penalty in minutes to discourage short hop on/off trips to/from freeway     
   elseif (LI.FT==38) ;HOV/HOT access links
     LINKCLASS = 6
     ADDTOGROUP= 5 ;All these should be excluded for all classes in distribution
     LW.mergepenalty = 0  ;merge penalty in minutes to go to/from managed lane (place holder for now)
   elseif (LI.FT==34) ;HOV links
     LINKCLASS = 6
     ADDTOGROUP= 6 ;All these should be excluded for all classes in distribution
   elseif (LI.FT==39) ;parallel HOT/toll links
     LINKCLASS = 6
     ADDTOGROUP= 7 ;All these should be excluded for all classes in distribution  
     LW.TOLL_COST_PK = LI.DISTANCE*(@FT39_cost_Pk@)/@FT39_value_Pk@  ;PEAK HOT COST EQUIVALENT MINUTES
     LW.TOLL_COST_OK = LI.DISTANCE*(@FT39_cost_Ok@)/@FT39_value_Ok@  ;OFF-PEAK HOT COST EQUIVALENT MINUTES
     LW.TOLL_COST_PK_SR2 = LI.DISTANCE*@FT39_cost_Pk2@/@FT39_value_Pk2@  ;PEAK HOT COST EQUIVALENT MINUTES
     LW.TOLL_COST_OK_SR2 = LI.DISTANCE*@FT39_cost_Ok2@/@FT39_value_Ok2@  ;OFF-PEAK HOT COST EQUIVALENT MINUTES
   elseif (LI.FT==40) ;tollway links
     LINKCLASS = 6
     ADDTOGROUP= 8 ;All these should be excluded for all classes in distribution   
     LW.TOLL_COST_PK = LI.DISTANCE*@FT40_cost_Pk@/@FT40_value_Pk@  ;PEAK TOLL COST EQUIVALENT MINUTES
     LW.TOLL_COST_OK = LI.DISTANCE*@FT40_cost_Ok@/@FT40_value_Ok@  ;OFF-PEAK TOLL COST EQUIVALENT MINUTES
     LW.TOLL_COST_PK_SR2 = LI.DISTANCE*@FT40_cost_Pk@/@FT40_value_Pk@  ;PEAK TOLL COST EQUIVALENT MINUTES
     LW.TOLL_COST_OK_SR2 = LI.DISTANCE*@FT40_cost_Ok@/@FT40_value_Ok@  ;OFF-PEAK TOLL COST EQUIVALENT MINUTES
   else
     LINKCLASS = 3     ;default to Art if I missed any
   endif
   
   IF (whatperiod = 1,3) ;IF AM/PM PEAKS
     LW.TOLL_COST = LW.TOLL_COST_PK 
     LW.TOLL_COST_SR2 = LW.TOLL_COST_PK_SR2 
   ELSE
     LW.TOLL_COST = LW.TOLL_COST_OK
     LW.TOLL_COST_SR2 = LW.TOLL_COST_OK_SR2 
   ENDIF  

 ;initialize link costs for each vehicle class (for first assignment iteration)
  IF (iteration=0)
   lw.COST1 = (lw.BASE_TIME + lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time    
   lw.COST2 = (lw.BASE_TIME + lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time
   lw.COST3 = (lw.BASE_TIME + lw.ramppenalty + LW.mergepenalty) + LI.DISTANCE*@auto_cost@/value_of_time    
   lw.COST4 = (lw.BASE_TIME + lw.ramppenalty + LW.mergepenalty) + LW.TOLL_COST + LI.DISTANCE*@auto_cost@/value_of_time
   lw.COST5 = (lw.BASE_TIME + lw.ramppenalty + LW.mergepenalty) + LW.TOLL_COST_SR2 + LI.DISTANCE*@auto_cost@/value_of_time
  ENDIF
 lw.temp = 1  ;temporary variable and a trick to avoid divide by 0
 
 @Paths_Y@ IF (LI.@PathsGroupField@==@PathsGroupFieldValues@) ADDTOGROUP=1 
ENDPHASE

   
PHASE=ILOOP 
    ;trips for each VEHICLE CLASS 
    mw[1] = MI.1.DA_NON	;drive alone, non-managed lane
    mw[2] = MI.1.SR_NON	;shared ride, non-managed lane
    mw[3] = MI.1.SR_HOV	;drive alone, HOV lane
    mw[4] = MI.1.DA_TOL	;drive alone, toll lane
    mw[5] = MI.1.SR_TOL	;shared ride, toll lane
 
  ;NOTE: After mode choice, trip tables for all purposes are multiplied by 100.
  ;load vehicle class 1, da non managed - exclude all managed lanes
  @Paths_Y@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST1, EXCLUDEGROUP=5-8, PENI=1, PATHO=1, PATHOGROUP=1, FULLPATH=@PathsFull@, INCLUDECOST=@PathsCost@, NAME=COST1_PATH, ALLJ=F,
  @Paths_N@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST1, EXCLUDEGROUP=5-8, PENI=1,
      VOL[1]=mw[1]/100
  
  ;load vehicle class 2, sr non managed - exclude all managed lanes
  @Paths_Y@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST2, EXCLUDEGROUP=5-8, PENI=1, PATHO=1, PATHOGROUP=1, FULLPATH=@PathsFull@, INCLUDECOST=@PathsCost@, NAME=COST2_PATH, ALLJ=F,
  @Paths_N@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST2, EXCLUDEGROUP=5-8, PENI=1,
      VOL[2]=mw[2]/100 
  
  ;NOTE: HOT lanes are not excluded in HOV paths is because HOV trips can use HOT lanes, which are coded as "toll" lanes
  ;	 	IF the HOT lane requires a non-zero toll for HOVs, then these trips will be called toll trips coming out of Mode Choice.
  ;	 	If HOV users ride free, they will be HOV trips out of MC, but can still use the HOT facility.
  
  ;load vehicle class 3, HOV - exclude toll facilities 
  @Paths_Y@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST3, EXCLUDEGROUP=8, PENI=1, PATHO=1, PATHOGROUP=1, FULLPATH=@PathsFull@, INCLUDECOST=@PathsCost@, NAME=COST3_PATH, ALLJ=F,
  @Paths_N@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST3, EXCLUDEGROUP=8, PENI=1, 
      VOL[3]=mw[3]/100        

  ;load vehicle class 4, da toll - exclude HOV lanes 
  @Paths_Y@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST4, EXCLUDEGROUP=6, PENI=1, PATHO=1, PATHOGROUP=1, FULLPATH=@PathsFull@, INCLUDECOST=@PathsCost@, NAME=COST4_PATH, ALLJ=F,
  @Paths_N@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST4, EXCLUDEGROUP=6, PENI=1, 
      VOL[4]=mw[4]/100     

  ;load vehicle class 5, sr toll - include all lanes 
  @Paths_Y@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST5, PENI=1, PATHO=1, PATHOGROUP=1, FULLPATH=@PathsFull@, INCLUDECOST=@PathsCost@, NAME=COST5_PATH, ALLJ=F,
  @Paths_N@ PATHLOAD CONSOLIDATE=T, PATH=lw.COST5, PENI=1, 
      VOL[5]=mw[5]/100 
        
ENDPHASE


PHASE=ADJUST  
   
  FUNCTION {
    ;calculate congested times for each LINK CLASS
    ;each LINK CLASS has its own volume-delay function  
    TC[1]=lw.BASE_TIME*(1 + @VDF_Fwy_coef@*(min(V/C, @maxfwyVCforVDF@))^@VDF_Fwy_exp@)  ; VDF Fwys
    TC[2]=lw.BASE_TIME*(1 + @VDF_Bng_coef@*(min(V/C, @maxfwyVCforVDF@))^@VDF_Bng_exp@)  ; VDF Bangerters
    TC[3]=lw.BASE_TIME*(1 + @VDF_Art_coef@*(min(V/C, @maxartVCforVDF@))^@VDF_Art_exp@)  ; VDF P & M arts
    TC[4]=lw.BASE_TIME*(1 + @VDF_Col_coef@*(min(V/C, @maxartVCforVDF@))^@VDF_Col_exp@)  ; VDF Coll
    TC[5]=lw.BASE_TIME*(1 + @VDF_Rmp_coef@*(min(V/C, @maxrmpVCforVDF@))^@VDF_Rmp_exp@)  ; VDF Ramps
    TC[6]=lw.BASE_TIME*(1 + @VDF_Fwy_coef@*(min(V/C, @maxfwyVCforVDF@))^@VDF_Fwy_exp@)  ; VDF HOV/HOT
        
    ;sum total volume for each link (sum of 5 VEHICLE CLASS volumes)
    V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]
         
     ;calculate costs for each LINK CLASS
     ;LINK CLASS costs are a weighted average of the VEHICLE CLASS costs
     ;Note: All costs below are identical except for HOV/HOT/toll links
     COST[1] = ((TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[1] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[2] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[3] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[4] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[5])/(V+lw.temp)
                
     COST[2] = ((TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[1] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[2] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[3] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[4] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[5])/(V+lw.temp)
                
     COST[3] = ((TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[1] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[2] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[3] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[4] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[5])/(V+lw.temp)
                
     COST[4] = ((TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[1] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[2] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[3] + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[4] +
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[5])/(V+lw.temp)
                
     COST[5] = (((TIME+lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[1] + 
                ((TIME+lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[2] +
                ((TIME+lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[3] + 
                ((TIME+lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[4] +
                ((TIME+lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[5])/(V+lw.temp)
                
     COST[6] = ((TIME + LI.DISTANCE*@auto_cost@/value_of_time)*0 + 
                (TIME + LI.DISTANCE*@auto_cost@/value_of_time)*0 +
                ((TIME+lw.mergepenalty) + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[3] + 
                ((TIME+lw.mergepenalty) + LW.TOLL_COST + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[4] + 
                ((TIME+lw.mergepenalty) + LW.TOLL_COST_SR2 + LI.DISTANCE*@auto_cost@/value_of_time)*VOL[5])/(V+lw.temp)
  } ;end functions


   ;compute VEHICLE CLASS COSTS for next iteration and assign to network 
   ;TIME is the same as TC
   lw.COST1 = (TIME + lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time    
   lw.COST2 = (TIME + lw.ramppenalty) + LI.DISTANCE*@auto_cost@/value_of_time
   lw.COST3 = (TIME + lw.ramppenalty + LW.mergepenalty) + LI.DISTANCE*@auto_cost@/value_of_time    
   lw.COST4 = (TIME + lw.ramppenalty + LW.mergepenalty) + LW.TOLL_COST + LI.DISTANCE*@auto_cost@/value_of_time
   lw.COST5 = (TIME + lw.ramppenalty + LW.mergepenalty) + LW.TOLL_COST_SR2 + LI.DISTANCE*@auto_cost@/value_of_time
   
   ;sum total system cost (for reporting)
   if(linkno=1) tot_cost=0
   tot_cost = tot_cost + lw.COST1*VOL[1] + lw.COST2*VOL[2] + lw.COST3*VOL[3] + lw.COST4*VOL[4] + lw.COST5*VOL[5]  

ENDPHASE
