; @asn_mainbody_distribution.block@
; Note: The assignment methods in distribution and final assignment are
; identical in practice, but are structured differently due to lack of 
; a defined HBC purpose in dist.

PARAMETERS zones=@UsedZones@  ; Number of Zones in OD Matrix and Network
PARAMETERS COMBINE=EQUI  ;Combine Iterative Arc Solution Sets to attain system equilibrium
PARAMETERS CAPFAC= 1.0
      
time_long = 1	;SOV, long trips (vehicle class 1)
dist_long = 0	;SOV, long trips (vehicle class 1)

time_short = .33	;SOV, short trips (vehicle class 2)
dist_short = .67	;SOV, short trips (vehicle class 2)


PHASE=LINKREAD

  ;since in distrib all trips are excluded from using HOV links, distribute the capacity
  ;of the HOV lanes accross the links that have a "companion HOV" (effectively merging the 
  ;HOV link with its companion as a single link)
  
  _HOVnum  = 0
  _HOVyear = 0
  if     (li.@HOVmarker@ >= 10000 && li.@HOVmarker@ < 20000) ;just 1 HOV lane (typical)
    _HOVnum  = 1
    _HOVyear = li.@HOVmarker@  - 10000
  elseif (li.@HOVmarker@ >= 20000)
    _HOVnum  = 2
    _HOVyear = li.@HOVmarker@  - 20000
  elseif (li.@HOVmarker@ == 0)
    _HOVnum  = 0
    _HOVyear = 0
  else  ;marker is less than 10000, so assume they forgot to include lane marker, but only the year
    _HOVnum  = 1
    if (li.@HOVmarker@ > 2000 && li.@HOVmarker@ <= 2050)     
      _HOVyear = li.@HOVmarker@ 
    endif
  endif
  
  if (_HOVnum <> 0 && @networkyear@ >= _HOVyear && _HOVyear > 0)
    lw.CAP1HR1LN = li.CAP1HR1LN + ((@HOVmaxCarsPerHour@*_HOVnum)/li.lanes) 
   ; print file=tmp@n@.txt, list= li.a, li.b, li.@HOVmarker@, li.lanes, li.CAP1HR1LN, lw.CAP1HR1LN, _HOVnum, _HOVyear, @networkyear@
  else
    lw.CAP1HR1LN = li.CAP1HR1LN
   ; print file=tmp@n@_not.txt, list= li.a, li.b, li.@HOVmarker@, li.lanes, li.CAP1HR1LN, lw.CAP1HR1LN, _HOVnum, _HOVyear, @networkyear@
  endif

  lw.BASE_TIME=(LI.DISTANCE/LI.SFF)*60
  if (@TestReversibleLane@ <> 0)
    if     (whatperiod = 1)
      C  = lw.CAP1HR1LN*(LI.lanes+LI.reverseam)*(hrsinperiod)  ;Period's LOS E link capacity
    elseif (whatperiod = 3)
      C  = lw.CAP1HR1LN*(LI.lanes+LI.reversepm)*(hrsinperiod)  ;Period's LOS E link capacity  
    else  ;must be MD or EV, so reversibles don't apply.
      C  = lw.CAP1HR1LN*LI.lanes*(hrsinperiod)  ;Period's LOS E link capacity  
    endif
  else
    C  = lw.CAP1HR1LN*LI.lanes*(hrsinperiod)  ;Period's LOS E link capacity
  endif  
  
   if (LI.FT==1,29-35)	;freeways and centroids
	   LINKCLASS = 1
   elseif (LI.FT==11) 	;Bangerter-types
	   LINKCLASS = 2
   elseif (LI.FT==2-3,9,10,22,23,42,43) 	;P & M Arts
	   LINKCLASS = 3
   elseif (LI.FT==4,5,24,44) 	;Coll
	   LINKCLASS = 4
   elseif (LI.FT==29,36-37) ;Ramps
	   LINKCLASS = 5
   elseif (LI.FT==38) ;HOV/HOT access links
     LINKCLASS = 6
     ADDTOGROUP= 5 ;All these should be excluded for all classes in distribution
   elseif (LI.FT==34) ;HOV links
     LINKCLASS = 6
     ADDTOGROUP= 6 ;All these should be excluded for all classes in distribution
   elseif (LI.FT==39) ;parallel HOT/toll links
     LINKCLASS = 6
     ADDTOGROUP= 7 ;All these should be excluded for all classes in distribution  
   elseif (LI.FT==40) ;tollway links
     LINKCLASS = 6
     ADDTOGROUP= 8 ;All these should be excluded for all classes in distribution   
   else
     LINKCLASS = 3 		;default to Art if I missed any
   endif

 ;initialize vehicle class costs for first assignment iteration
  IF (iteration=0)
   lw.COST1 = lw.BASE_TIME*time_long  + LI.DISTANCE*dist_long
   lw.COST2 = lw.BASE_TIME*time_short + LI.DISTANCE*dist_short
  ENDIF
  
 lw.temp = 1  ;add one to avoid divide by 0

ENDPHASE

  PHASE=ILOOP
    mw[1] = MI.1.HBW  ;Long trips
    mw[2] = MI.1.HBC
    mw[3] = MI.1.HBO
    mw[4] = MI.1.NHB
    mw[5] = MI.1.IX
    mw[6] = MI.1.XI
    mw[7] = MI.1.COMM
    mw[8] = MI.1.XX
    mw[9] = MI.1.TOT

    mw[11] = MI.2.HBW  ;Short trips
    mw[12] = MI.2.HBC
    mw[13] = MI.2.HBO
    mw[14] = MI.2.NHB
    mw[15] = MI.2.IX
    mw[16] = MI.2.XI
    mw[17] = MI.2.COMM
    mw[18] = MI.2.XX
    mw[19] = MI.2.TOT
  
  ;load vehicle class 1, exclude HOV lanes
  ;NOTE: Before mode choice, trip tables for all purposes are NOT multiplied by 100 (afterward they are).
  ;NOTE: Each vehicle class is broken into two sub-classes for reporting (work and non-work)  
  PATHLOAD CONSOLIDATE=T, PATH=lw.COST1, EXCLUDEGROUP=5-7,
      VOL[1]=mw[1]/100,  ;After MC, all purposes are multiplied by 100.  Dividing sooner loses a lot
      VOL[2]=mw[2]/100,  ;of trips due to lack of precision in matrix storage.
      VOL[3]=mw[3]/100, 
      VOL[4]=mw[4]/100,
      VOL[5]=mw[5]/100, 
      VOL[6]=mw[6]/100, 
      VOL[7]=mw[7]/100, 
      VOL[8]=mw[8]/100
 
  ;load vehicle class 2, exclude HOV lanes
  PATHLOAD CONSOLIDATE=T, PATH=lw.COST2, EXCLUDEGROUP=5-7, 
      VOL[11]=mw[11]/100,  ;After MC, all purposes are multiplied by 100.  Dividing sooner loses a lot
      VOL[12]=mw[12]/100,  ;of trips due to lack of precision in matrix storage.
      VOL[13]=mw[13]/100, 
      VOL[14]=mw[14]/100,
      VOL[15]=mw[15]/100, 
      VOL[16]=mw[16]/100, 
      VOL[17]=mw[17]/100, 
      VOL[18]=mw[18]/100

  ENDPHASE

  PHASE=ADJUST
  
  FUNCTION {

    TC[1]=lw.BASE_TIME*(1 + @VDF_Fwy_coef@*(min(V/C, @maxfwyVCforVDF@))^@VDF_Fwy_exp@)  ; VDF Fwys
    TC[2]=lw.BASE_TIME*(1 + @VDF_Bng_coef@*(min(V/C, @maxfwyVCforVDF@))^@VDF_Bng_exp@)  ; VDF Bangerters
    TC[3]=lw.BASE_TIME*(1 + @VDF_Art_coef@*(min(V/C, @maxartVCforVDF@))^@VDF_Art_exp@)  ; VDF P & M arts
    TC[4]=lw.BASE_TIME*(1 + @VDF_Col_coef@*(min(V/C, @maxartVCforVDF@))^@VDF_Col_exp@)  ; VDF Coll
    TC[5]=lw.BASE_TIME*(1 + @VDF_Rmp_coef@*(min(V/C, @maxrmpVCforVDF@))^@VDF_Rmp_exp@)  ; VDF Ramps
    TC[6]=lw.BASE_TIME*(1 + @VDF_Fwy_coef@*(min(V/C, @maxfwyVCforVDF@))^@VDF_Fwy_exp@)  ; VDF HOV/HOT
   ;TC6 not necessary since class 6 is excluded for all vehicles while in distribution, but include anyway.

    ;sum total volume for each link (sum of 4 vehicle sub-classes)
    V=VOL[1] +VOL[2] +VOL[3] +VOL[4] +VOL[5] +VOL[6] +VOL[7] +VOL[8]+
      VOL[11]+VOL[12]+VOL[13]+VOL[14]+VOL[15]+VOL[16]+VOL[17]+VOL[18]
          
     ;Note: All costs below are identical except for HOV links
     COST[1] = ((TIME*time_long  + LI.DISTANCE*dist_long) *VOL[1] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[2] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[3] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[4] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[5] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[6] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[7] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[8] + 

                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[11] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[12] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[13] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[14] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[15] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[16] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[17] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[18] )/(V+lw.temp)

     COST[2] = ((TIME*time_long  + LI.DISTANCE*dist_long) *VOL[1] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[2] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[3] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[4] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[5] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[6] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[7] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[8] + 

                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[11] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[12] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[13] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[14] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[15] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[16] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[17] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[18] )/(V+lw.temp)
                
     COST[3] = ((TIME*time_long  + LI.DISTANCE*dist_long) *VOL[1] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[2] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[3] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[4] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[5] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[6] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[7] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[8] + 

                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[11] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[12] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[13] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[14] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[15] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[16] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[17] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[18] )/(V+lw.temp)
                
     COST[4] = ((TIME*time_long  + LI.DISTANCE*dist_long) *VOL[1] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[2] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[3] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[4] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[5] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[6] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[7] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[8] + 

                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[11] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[12] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[13] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[14] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[15] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[16] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[17] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[18] )/(V+lw.temp)
                
     COST[5] = ((TIME*time_long  + LI.DISTANCE*dist_long) *VOL[1] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[2] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[3] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[4] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[5] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[6] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[7] + 
                (TIME*time_long  + LI.DISTANCE*dist_long) *VOL[8] + 

                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[11] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[12] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[13] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[14] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[15] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[16] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[17] + 
                (TIME*time_short + LI.DISTANCE*dist_short)*VOL[18] )/(V+lw.temp)
  
  ;Cost 6 not necessary since class 6 is excluded for all vehicles while in distribution.
  } ;end functions

   ;compute vehicle costs for next iteration and assign to network 
   ;TIME is the same as TC
   lw.COST1 = TIME*time_long  + LI.DISTANCE*dist_long
   lw.COST2 = TIME*time_short + LI.DISTANCE*dist_short
   
  ; if(linkno=1) tot_cost=0
  ; tot_cost = tot_cost+ lw.COST1*VOL[1] + lw.COST1*VOL[2] + lw.COST2*VOL[3] + lw.COST2*VOL[4] 

  ENDPHASE
